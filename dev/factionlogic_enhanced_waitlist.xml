<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionLogic_Enhanced_Waitlist"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../xsd/md.xsd">
  <cues>
    <!-- Variables
      $Enhanced_Scores = table[
        $economyModifier = float
        $militaryModifier = float
        $industryModifier = float
      ]

      $Enhanced_Ships.$Waitlists = table[
        {$type} = table[    ($type of $Types = ['Fight', 'Mine', 'Trade', 'Build']
          $Ships = table[
            {$size} =       ($size of $Sizes = ['xxl', class.size_xl, class.size_l, class.size_m, class.size_s]
          ],
          $Subordinates = table[
            {$size} = 
        ]
      ]
      
      $Enhanced_Stations.$Constructing = table[
        $xxl = [$station]
        $xl = [$station]
        $l = [$station]
        $Wharfs = [$station]
        $Equipment = [$station]
        $Trade = [$station]
        $Defense = [$station]
        $Pirate = [$station]
        $Factory = table[{$resource} = $station]
        $Expansion = table[{$resource} = $station]
        ]
      ]

      (set by process station; static)
      $Enhanced_Industry.$BuildSlots = table[
        $s = int
        $m = int
        $l = int
        $xl = int
        $xxl = int
        $cv = int
        $planet = int
      ]

      (when build queue has resources available to initiate a waiting build but not build slots available; dynamic)
      $Enhanced_Industry.$BuildShortage = table[
        $s = int
        $m = int
        $l = int
        $xl = int
        $xxl = int
        $station = int
      ]
      $Enhanced_Industry.$ResourceShortage = table[
        $s = int
        $m = int
        $l = int
        $xl = int
        $xxl = int
      ]

      $Enhanced_BuildPriority = table[
        $Buildmodules = table[
          $wharf = float
          $l = float (shipyard buildmodule size large)
          $xl = float (shipyard buildmodule size ex-large)
          $xxl = float (shipyard buildmodule size ex-ex-large)
        ]
        $Productionmodules = table[
          {$product} = float
        ]
        $Ships = table[
          $fight = float
          $mine = float
          $trade = float
          $build = float 
        ]
      ]
    -->

    <library name="Run">
      <!-- notes:
        use weighted scores to assign build chance (chance = score / totalscores)
        find available slots check all build stations

        $Enhanced_BuildPriority = table[
          $Stations = table[
            $Buildmodules = table[          (Calculate_Ship_Building_Score)
              $wharf = float
              $l = float
              $xl = float
              $xxl = float
            ]
            $Productionmodules = table[     (
              {$resource}
            ]
          ]
          $Ships = table[
            $Mine = table[                  (Process_Efficiencies)
              $score = float                    (average of gas and solid score)
              $Gas = table[
                $score = float                  (average of all gas scores)
                {$resource} = float             (efficiency * demandVolume / maxDemandVolume)
              ]
              $Solid = table[
                $score = float                  (average of all solid scores)
                {$resource} = float             (efficiency * demandVolume / maxDemandVolume)
              ]
            ]
            $Trade = table[                 (Process_Efficiencies)
              $score = float                    (average of all trade scores)
              {$resource} = float               (efficiency * demandVolume / maxDemandVolume)
            ] 
            $build = float                  (Calculate_Station_Building_Score | )
            $fight = float                  (Calculate_Raw_Military_Score | $totalThreatScore / $desiredThreatScore = $Enhanced_Scores.$military)
          ]
        ]
      ]
      -->
      <actions>
        <include_actions ref="Process_ShipLists" />
        <include_actions ref="Build_Stations" />
      </actions>
    </library>

    <library name="Process_ShipLists">
      <actions>
        <!-- ships -->
        <!-- enhanced todo: modify vanilla logic to prevent duplicate ships from being added to waitlist -->

        <!-- Phase 0 -->
        <include_actions ref="ShipLists_Initialize" />
        <!-- Phase 1 -->
        <include_actions ref="ShipLists_ProcessBuildStations" />
        <!-- Phase 2 -->
        <include_actions ref="ShipLists_Build" />
        <!-- Phase 3 -->
        <include_actions ref="ShipLists_Shortages" />

        <!-- Debug Final Shortages -->
        <!-- enhanced todo: ensure $Enhanced_Industry.$ResourceShortage and $Enhanced_Industry.$BuildShortage are initialized in FactionLogic -->
        <debug_text text="'Resource Shortages: S=' + $Enhanced_Industry.$ResourceShortage.{class.size_s} + ' M=' + $Enhanced_Industry.$ResourceShortage.{class.size_m} + ' L=' + $Enhanced_Industry.$ResourceShortage.{class.size_l} + ' XL=' + $Enhanced_Industry.$ResourceShortage.{class.size_xl} + ' XXL=' + $Enhanced_Industry.$ResourceShortage.{'xxl'}" chance="$DebugChance" />
        <debug_text text="'Industry Shortages: S=' + $Enhanced_Industry.$BuildShortage.{class.size_s} + ' M=' + $Enhanced_Industry.$BuildShortage.{class.size_m} + ' L=' + $Enhanced_Industry.$BuildShortage.{class.size_l} + ' XL=' + $Enhanced_Industry.$BuildShortage.{class.size_xl} + ' XXL=' + $Enhanced_Industry.$BuildShortage.{'xxl'}" chance="$DebugChance" />

        <!-- enhanced todo: improve cleanup -->
        <!-- Cleanup -->
        <remove_value name="$ShipyardTable" />
        <!-- -->
      </actions>
    </library>
    <library name="ShipLists_Initialize">      <!-- Phase 0 -->
      <actions>
        <!-- Initialize Tables -->
        <set_value name="$Enhanced_Industry.$BuildShortage" exact="table[class.size_s=0, class.size_m=0, class.size_l=0, class.size_xl=0, 'xxl'=0]" />
        <set_value name="$Enhanced_Industry.$ResourceShortage" exact="table[class.size_s=0, class.size_m=0, class.size_l=0, class.size_xl=0, 'xxl'=0]" />
        <set_value name="$BeginningSlots" exact="table[class.size_s=0, class.size_m=0, class.size_l=0, class.size_xl=0, 'xxl'=0]" />
        <set_value name="$ShipyardTable" exact="table[]" />

        <!-- generate waitlists -->
        <do_for_each name="$type" in="$Types">
          <do_for_each name="$size" in="$Sizes">
            <do_if value="$size != 'xxl'">
              <do_for_each name="$purpose" in="$PurposeLists.{'$'+$type}">
                <do_if value="$type == 'Mine'">
                  <!-- find solid miners and salvagers -->
                  <find_waiting_subordinate name="$Enhanced_Ships.$Waitlists.$Mine.$Solid.$Subordinates.{'$'+$size}" owner="$Faction" hasbuildingtask="false" multiple="true" active="true" append="true">
                    <match_parent negate="true" class="class.component" />
                    <match primarypurpose="$purpose" />
                    <match class="$size" />
                    <match_any>
                      <match_basket_wares wares="ware.ice" />
                      <match_basket_wares wares="ware.nividium" />
                      <match_basket_wares wares="ware.ore" />
                      <match_basket_wares wares="ware.silicon" />
                      <match_basket_wares wares="ware.rawscrap" />
                    </match_any>
                  </find_waiting_subordinate>
                  <find_waiting_job_ship name="$Enhanced_Ships.$Waitlists.$Mine.$Solid.$Ships.{'$'+$size}" owner="$Faction" hasbuildingtask="false" multiple="true" append="true">
                    <match_parent negate="true" class="class.component" />
                    <match primarypurpose="$purpose" />
                    <match class="$size" />
                    <match_any>
                      <match_basket_wares wares="ware.ice" />
                      <match_basket_wares wares="ware.nividium" />
                      <match_basket_wares wares="ware.ore" />
                      <match_basket_wares wares="ware.silicon" />
                      <match_basket_wares wares="ware.rawscrap" />
                    </match_any>
                  </find_waiting_job_ship>
                  <!-- find gas miners -->
                  <find_waiting_subordinate name="$Enhanced_Ships.$Waitlists.$Mine.$Gas.$Subordinates.{'$'+$size}" owner="$Faction" hasbuildingtask="false" multiple="true" active="true" append="true">
                    <match_parent negate="true" class="class.component" />
                    <match primarypurpose="$purpose" />
                    <match class="$size" />
                    <match_any>
                      <match_basket_wares wares="ware.helium" />
                      <match_basket_wares wares="ware.hydrogen" />
                      <match_basket_wares wares="ware.methane" />
                    </match_any>
                  </find_waiting_subordinate>
                  <find_waiting_job_ship name="$Enhanced_Ships.$Waitlists.$Mine.$Gas.$Ships.{'$'+$size}" owner="$Faction" hasbuildingtask="false" multiple="true" append="true">
                    <match_parent negate="true" class="class.component" />
                    <match primarypurpose="$purpose" />
                    <match class="$size" />
                    <match_any>
                      <match_basket_wares wares="ware.helium" />
                      <match_basket_wares wares="ware.hydrogen" />
                      <match_basket_wares wares="ware.methane" />
                    </match_any>
                  </find_waiting_job_ship>
                </do_if>
                <do_else>
                  <!-- find everything else -->
                  <find_waiting_subordinate name="$Enhanced_Ships.$Waitlists.{'$'+$type}.$Subordinates.{'$'+$size}" owner="$Faction" hasbuildingtask="false" multiple="true" active="true" append="true">
                    <match_parent negate="true" class="class.component" />
                    <match primarypurpose="$purpose" />
                    <match class="$size" />
                  </find_waiting_subordinate>
                  <find_waiting_job_ship name="$Enhanced_Ships.$Waitlists.{'$'+$type}.$Ships.{'$'+$size}" owner="$Faction" hasbuildingtask="false" multiple="true" append="true">
                    <match_parent negate="true" class="class.component" />
                    <match primarypurpose="$purpose" />
                    <match class="$size" />
                  </find_waiting_job_ship>
                </do_else>
              </do_for_each>
            </do_if>
          </do_for_each>
        </do_for_each>

        <!-- waitlist chance -->
        <!-- use weighted scores to assign build chance (chance = score / totalscores)
          trade: transportation efficiency (economy)
          mine: mining efficiency (resource based?) (economy)
          fight: desired threatscores? (military)
          build: construction score (industry)
        -->

        <!-- slots remaining and valid ships in waitlist, add to not enough resources -->

        <!-- how many ship builds started and cost (modifies demand)
          how many build slots are inactive vs waitlist = not enough resources (not enough production) -->

        <!-- add number remaining in waitlist minus resource shortage to these:
            $Enhanced_Industry.$BuildShortage = table[
              class.size_s = int
              class.size_m = int
              class.size_l = int
              class.size_xl = int
              'xxl' = int
              $station = int
            ]
          -->
        <!-- enhanced todo: change mining and trade scores to use specific scores in build priority -->
        <set_value name="$chanceMilitary" exact="((1 - $Enhanced_Scores.$military + $Enhanced_Scores.$militaryModifier)*100.0)i" />
        <set_value name="$chanceIndustry" exact="((1 - $Enhanced_Scores.$industry + $Enhanced_Scores.$industryModifier)*100.0)i" />
        <set_value name="$chanceEconomy" exact="((1 - $Enhanced_Scores.$economy + $Enhanced_Scores.$economyModifier)*100.0)i" />

        <!-- military -->
        <set_value name="$chanceFight" exact="1" /> <!-- (1 - $Enhanced_Scores.$military) -->
        <!-- industry -->
        <set_value name="$chanceBuild" exact="1" /> <!-- (1 - $Enhanced_Scores.$industry) -->
        <!-- economy -->
        <set_value name="$chanceTrade" exact="((1 - $Enhanced_BuildPriority.$Trade.$score)*100.0)i" />
        <set_value name="$chanceMine" exact="((1 - $Enhanced_BuildPriority.$Mine.$score)*100.0)i" />
        <set_value name="$chanceSolid" exact="((1 - $Enhanced_BuildPriority.$Mine.$Solid.$score)*100.0)i" />
        <set_value name="$chanceGas" exact="((1 - $Enhanced_BuildPriority.$Mine.$Gas.$score)*100.0)i" />

        <!-- Check for Empty Waitlists and Adjust Chances -->
        <!-- Initialize flags -->
        <set_value name="$hasGas" exact="false" />
        <set_value name="$hasSolid" exact="false" />

        <!-- Check each category -->
        <do_for_each name="$type" in="$Types">
          <set_value name="$hasShips" exact="false" />

          <!-- Check for any ships -->
          <do_for_each name="$size" in="$Sizes">
            <do_if value="$type == 'Mine'">
              <!-- Gas checks -->
              <do_if value="not $hasGas">
                <do_if value="@$Enhanced_Ships.$Waitlists.$Mine.$Gas.$Ships.{$size}.count > 0 or @$Enhanced_Ships.$Waitlists.$Mine.$Gas.$Subordinates.{$size}.count > 0">
                  <set_value name="$hasGas" exact="true" />
                </do_if>
              </do_if>
              <!-- Solid checks -->
              <do_if value="not $hasSolid">
                <do_if value="@$Enhanced_Ships.$Waitlists.$Mine.$Solid.$Ships.{$size}.count > 0 or @$Enhanced_Ships.$Waitlists.$Mine.$Solid.$Subordinates.{$size}.count > 0">
                  <set_value name="$hasSolid" exact="true" />
                </do_if>
              </do_if>
              <!-- Break only when both are true -->
              <do_if value="$hasGas and $hasSolid">
                <break />
              </do_if>
            </do_if>
            <do_else>
              <do_if value="@$Enhanced_Ships.$Waitlists.{'$' + {$type}}.$Ships.{$size}.count > 0">
                <set_value name="$hasShips" exact="true" />
                <break />
              </do_if>
              <do_if value="@$Enhanced_Ships.$Waitlists.{'$' + {$type}}.$Subordinates.{$size}.count > 0">
                <set_value name="$hasShips" exact="true" />
                <break />
              </do_if>
            </do_else>
          </do_for_each>
        </do_for_each>

        <!-- Set chances based on presence of ships -->
        <do_for_each name="$type" in="$Types">
          <do_if value="$type == 'Mine'">
            <set_value name="$tempMine" exact="if (not $hasGas) and (not $hasSolid) then 0 else $chanceMine" />
            <do_if value="$chanceMine gt 0">
              <set_value name="$tempGas" exact="if (not $hasGas) then 0 else $chanceGas" />
              <set_value name="$tempSolid" exact="if (not $hasSolid) then 0 else $chanceSolid" />
            </do_if>
          </do_if>
          <do_else>
            <set_value name="this.{'$temp' + {$type}}" exact="if (not $hasShips) then 0 else {'$chance' + {$type}}" />
          </do_else>
        </do_for_each>

        <!-- Dependent chance adjustments -->
        <set_value name="$tempMilitary" exact="if $tempFight == 0 then 0 else $chanceMilitary" />
        <set_value name="$tempIndustry" exact="if $tempBuild == 0 then 0 else $chanceIndustry" />
        <set_value name="$tempEconomy" exact="if $tempMine == 0 and $tempTrade == 0 then 0 else $chanceEconomy" />
      </actions>
    </library>
    <library name="ShipLists_ProcessBuildStations">      <!-- Phase 1 -->
      <actions>
        <!-- Process Each $Enhanced_BuildStation -->
        <do_for_each name="$shipyard" in="$Enhanced_BuildStations">
          <set_value name="$FreeBuildModuleTable" exact="table[]" />
          <set_value name="$Slots" exact="table[class.size_s=0, class.size_m=0, class.size_l=0, class.size_xl=0, 'xxl'=0]" />

          <!--TODO @Owen use freebuildprocessors?-->
          <set_value name="$BuildModules" exact="$shipyard.buildmodules" />
          <do_if value="$BuildModules.count">
            <set_value name="$QueuedBuilds" exact="$shipyard.builds.queued" />
            <!--The queued builds are used to check what non-busy processors could soon be assigned to. Remove any non-ship construction builds or those which already have an assigned processor but not yet started.-->
            <do_all exact="$QueuedBuilds.count" counter="$j" reverse="true">
              <do_if value="not $QueuedBuilds.{$j}.isshipbuild or ($QueuedBuilds.{$j}.buildobject.exists and $QueuedBuilds.{$j}.buildprocessor)">
                <remove_value name="$QueuedBuilds.{$j}" />
              </do_if>
            </do_all>
            <do_for_each name="$buildmodule" in="$station.buildmodules">
              <find_object_component name="$FreeBuildProcessors" class="class.buildprocessor" busy="false" object="$buildmodule" multiple="true" />
              <do_if value="$FreeBuildProcessors.count">
                <!--Go over the queued ship construction builds and see if this build module can accomodate one. If so, remove a processor as it is 'reserved' for a queued build.-->
                <do_all exact="$QueuedBuilds.count" counter="$k" reverse="true">
                  <assert value="not $QueuedBuilds.{$k}.buildobject or $QueuedBuilds.{$k}.buildobject.state == componentstate.operational" text="'Queued build has a buildobject which is not operational: ' + $QueuedBuilds.{$k}.buildobject + ' ' + $QueuedBuilds.{$k}.buildobject.knownname + ' state: ' + $QueuedBuilds.{$k}.buildobject.state + ' Parent: ' + $QueuedBuilds.{$k}.buildobject.parent + ' [Owen]'" />
                  <do_if value="($QueuedBuilds.{$k}.buildobject and $buildmodule.dock.{$QueuedBuilds.{$k}.buildobject.docksize}) or ($QueuedBuilds.{$k}.macro and $buildmodule.dock.{$QueuedBuilds.{$k}.macro.docksize})">
                    <remove_value name="$FreeBuildProcessors.{1}" />
                  </do_if>
                  <do_if value="$FreeBuildProcessors.count == 0">
                    <break />
                  </do_if>
                </do_all>

                <!-- Get Available Slots -->
                <do_for_each name="$processor" in="$FreeBuildProcessors">
                  <do_for_each name="$class" in="[class.size_s, class.size_m, class.size_l, class.size_xl]">
                    <do_if value="$class == class.size_xl and $buildmodule.dock.{tag.dock_xxl}">
                      <set_value name="$Slots.{'xxl'}" operation="add" exact="1" />
                    </do_if>
                    <do_else>
                      <set_value name="$Slots.{$class}" operation="add" exact="$processor.canbuildclass.{$class}" />
                    </do_else>
                  </do_for_each>
                </do_for_each>
                <set_value name="$FreeBuildModuleTable.{$buildmodule}" operation="add" exact="$FreeBuildProcessors.count" />
              </do_if>
            </do_for_each>
          </do_if>

          <do_if value="$FreeBuildModuleTable.keys.count">
            <debug_text text="$Faction.knownname + ' Shipyard: ' + $shipyard + ' ' + $shipyard.knownname + ' in ' + $shipyard.sector.knownname + ' has build modules with free processors: ' + $FreeBuildModuleTable" chance="$DebugChance" />
            <set_value name="$ShipyardTable.{$shipyard}" exact="table[]" />
            <set_value name="$ShipyardTable.{$shipyard}.$FreeBuildModuleTable" exact="$FreeBuildModuleTable" />
            <set_value name="$ShipyardTable.{$shipyard}.$On_hand" exact="$Enhanced_Stations.{$shipyard}.$On_hand.clone" />
            <set_value name="$ShipyardTable.{$shipyard}.$sector" exact="$shipyard.sector" />
            <set_value name="$ShipyardTable.{$shipyard}.$Slots" exact="$Slots.clone" />
            <do_for_each name="$size" in="$Slots">
              <set_value name="$BeginningSlots.{$size}" operation="add" exact="$Slots.{$size}" />
            </do_for_each>
          </do_if>
          <do_else>
            <debug_text text="$Faction.knownname + ' Ignoring shipyard: ' + $shipyard + ' ' + $shipyard.knownname + ' in ' + $shipyard.sector.knownname + ' as it does not have enough free build processors'" chance="$DebugChance" />
          </do_else>
        </do_for_each>
        <set_value name="$RemainingSlots" exact="$BeginningSlots.clone" />
      </actions>
    </library>
    <library name="ShipLists_Build">      <!-- Phase 2 -->
      <actions>
        <!-- Process Waitlists until no more ships or no more slots -->
        <set_value name="$sanity" exact="0" />
        <set_value name="$totalChance" exact="$tempMilitary + $tempIndustry + $tempEconomy" />
        <do_while value="$totalChance gt 0 and $RemainingSlots.{class.size_s} + $RemainingSlots.{class.size_m} + $RemainingSlots.{class.size_l} + $RemainingSlots.{class.size_xl} + $RemainingSlots.{'xxl'} gt 0">
          <!-- Select Waitlist Based on Weighted Chances -->
          <do_any>
            <set_value name="$primary" exact="'Military'" weight="$tempMilitary" />
            <set_value name="$primary" exact="'Industry'" weight="$tempIndustry" />
            <set_value name="$primary" exact="'Economy'" weight="$tempEconomy" />
          </do_any>

          <do_if value="$primary == 'Military'">
            <do_any>
              <set_value name="$Waitlist" exact="$Enhanced_Ships.$Waitlists.$Fight" weight="$tempFight" />
            </do_any>
          </do_if>
          <do_elseif value="$primary == 'Industry'">
            <do_any>
              <set_value name="$Waitlist" exact="$Enhanced_Ships.$Waitlists.$Build" weight="$tempBuild" />
            </do_any>
          </do_elseif>
          <do_else>            <!-- economy -->
            <do_any>
              <set_value name="$Waitlist" exact="$Enhanced_Ships.$Waitlists.$Trade" weight="$tempTrade" />
              <do_any weight="$tempMine">
                <set_value name="$Waitlist" exact="$Waitlist.$Solid" weight="$tempSolid" />
                <set_value name="$Waitlist" exact="$Waitlist.$Gas" weight="$tempGas" />
              </do_any>
            </do_any>
          </do_else>

          <!-- Process Selected Waitlist -->
          <set_value name="$built" exact="false" />
          <do_for_each name="$size" in="$Sizes">
            <do_if value="$RemainingSlots.{$size} gt 0">
              <do_for_each name="$ship" in="$Waitlist.$Ships.{$size}">
                <!-- Initialize Shipyard Scoring Tables -->
                <set_value name="$ShipCostTable" exact="table[]" />
                <set_value name="$ShipyardPriceTables" exact="table[]" />
                <set_value name="$ShipyardDistanceTable" exact="table[]" />
                <set_value name="$JumpCheckRange" exact="4" comment="Max range for distance scoring" />

                <!-- Evaluate Shipyards -->
                <do_all exact="$ShipyardTable.keys.count" counter="$k">
                  <set_value name="$Shipyard" exact="$ShipyardTable.keys.{$k}" />
                  <do_if value="$ShipyardTable.{$Shipyard}.$Slots.{$size} gt 0">
                    <!-- Get Price -->
                    <do_if value="not $ShipyardPriceTables.{$Shipyard}?">
                      <set_value name="$ShipyardPriceTables.{$Shipyard}" exact="$Shipyard.buildbuyprices" />
                    </do_if>
                    <get_object_value result="$ShipValue" object="$ship" pricetable="$ShipyardPriceTables.{$Shipyard}" />
                    <set_value name="$ShipCostTable.{$Shipyard}" exact="$ShipValue" />

                    <!-- Get Distance -->
                    <do_if value="not $ShipyardTable.{$Shipyard}.$DistanceTable?">
                      <find_cluster_in_range distances="$ShipyardTable.{$Shipyard}.$DistanceTable" object="$Shipyard" maxdistance="$JumpCheckRange" multiple="true" />
                    </do_if>
                    <set_value name="$JobCluster" exact="@$ship.jobcommander.cluster" />
                    <do_if value="not $JobCluster">
                      <set_value name="$JobCluster" exact="@$ship.jobmainsector.cluster" />
                    </do_if>
                    <do_if value="$JobCluster and $ShipyardTable.{$Shipyard}.$DistanceTable.{$JobCluster}? and $ShipyardTable.{$Shipyard}.$DistanceTable.{$JobCluster} ge 0">
                      <set_value name="$ShipyardDistanceTable.{$Shipyard}" exact="$ShipyardTable.{$Shipyard}.$DistanceTable.{$JobCluster}" />
                    </do_if>
                    <do_elseif value="$Shipyard.gatedistance.{$JobCluster} ge 0">
                      <set_value name="$ShipyardDistanceTable.{$Shipyard}" exact="$JumpCheckRange + 1" />
                    </do_elseif>
                  </do_if>
                </do_all>

                <!-- Score and Select Shipyard -->
                <set_value name="$ScoredShipyardTable" exact="table[]" />
                <set_value name="$PriceOrder" exact="$ShipCostTable.keys.sorted" />
                <set_value name="$DistanceOrder" exact="$ShipyardDistanceTable.keys.sorted" />
                <do_all exact="$PriceOrder.count" counter="$k">
                  <do_if value="$DistanceOrder.indexof.{$PriceOrder.{$k}} ge 0">
                    <set_value name="$ScoredShipyardTable.{$PriceOrder.{$k}}" exact="$k + $DistanceOrder.indexof.{$PriceOrder.{$k}}" />
                  </do_if>
                </do_all>

                <do_if value="$ScoredShipyardTable.keys.count">
                  <set_value name="$SelectedShipyardIndex" min="1" max="$ScoredShipyardTable.keys.count" profile="decreasing" />
                  <set_value name="$ScoreOrder" exact="$ScoredShipyardTable.keys.sorted" />
                  <set_value name="$Shipyard" exact="$ScoreOrder.{$SelectedShipyardIndex}" />

                  <!-- Check Resources (Assuming buildresources is a table of ware:amount) -->
                  <set_value name="$resourcesMet" exact="true" />
                  <do_for_each name="$resource" in="$ship.buildresources">
                    <do_if value="$ShipyardTable.{$Shipyard}.$On_hand.{$resource} lt $ship.buildresources.{$resource}">
                      <set_value name="$resourcesMet" exact="false" />
                      <break />
                    </do_if>
                  </do_for_each>

                  <do_if value="$resourcesMet">
                    <!-- Deduct Resources -->
                    <do_for_each name="$resource" in="$ship.buildresources">
                      <set_value name="$ShipyardTable.{$Shipyard}.$On_hand.{$resource}" operation="subtract" exact="$ship.buildresources.{$resource}" />
                    </do_for_each>

                    <!-- Assign Build -->
                    <add_build_to_construct_ship result="$Build" object="$Shipyard" buildobject="$ship" faction="$Faction" price="if $Shipyard.isplayerowned then $ShipCostTable.{$Shipyard} else 0Cr" />
                    <debug_text text="$Faction.knownname + ' Added build order ' + $Build + ' for ship ' + $ship.knownname + ' on shipyard: ' + $Shipyard + ' in ' + $Shipyard.sector.knownname" chance="$DebugChance" />

                    <!-- Update Slots and Build Modules -->
                    <set_value name="$RemainingSlots.{$size}" operation="subtract" exact="1" />
                    <set_value name="$ShipyardTable.{$Shipyard}.$Slots.{$size}" operation="subtract" exact="1" />

                    <set_value name="$SuitableBuildModule" exact="false" />
                    <do_all exact="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.count" counter="$o">
                      <do_if value="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.{$o}.dock.{$ship.docksize}">
                        <set_value name="$SuitableBuildModule" exact="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.{$o}" />
                        <break />
                      </do_if>
                    </do_all>
                    <do_if value="$SuitableBuildModule">
                      <do_if value="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.{$SuitableBuildModule} == 1">
                        <remove_value name="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.{$SuitableBuildModule}" />
                      </do_if>
                      <do_else>
                        <set_value name="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.{$SuitableBuildModule}" operation="subtract" exact="1" />
                      </do_else>
                    </do_if>

                    <!-- Remove Shipyard if No Slots Left -->
                    <do_if value="$ShipyardTable.{$Shipyard}.$Slots.{class.size_s} + $ShipyardTable.{$Shipyard}.$Slots.{class.size_m} + $ShipyardTable.{$Shipyard}.$Slots.{class.size_l} + $ShipyardTable.{$Shipyard}.$Slots.{class.size_xl} + $ShipyardTable.{$Shipyard}.$Slots.{'xxl'} == 0">
                      <remove_value name="$ShipyardTable.{$Shipyard}" />
                    </do_if>

                    <!-- Mark as Built and Remove from Waitlist -->
                    <set_value name="$built" exact="true" />
                    <remove_from_list name="$Waitlist.$Ships.{$size}" exact="$ship" />
                    <debug_text text="'Building ship ' + $ship.macro + ' at ' + $Shipyard.knownname" chance="$DebugChance" />
                    <break />
                  </do_if>
                </do_if>
              </do_for_each>
              <do_if value="$built">
                <break />
              </do_if>
            </do_if>
          </do_for_each>

          <!-- Adjust Chance if No Build Occurred or Waitlist is now empty -->
          <do_if value="$built">
            <set_value name="$clearChance" exact="true" />
            <do_for_each name="$size" in="$Waitlist.$Ships">
              <do_if value="$Waitlist.$Ships.{$size}.count gt 0">
                <set_value name="$clearChance" exact="false" />
                <break />
              </do_if>
            </do_for_each>
          </do_if>

          <do_if value="not $built or $clearChance">
            <do_if value="$Waitlist == $WaitlistFight">
              <set_value name="$tempFight" exact="0" />
            </do_if>
            <do_elseif value="$Waitlist == $WaitlistMine.$Gas or $Waitlist == $WaitlistMine.$Solid">
              <do_if value="$Waitlist == $WaitlistMine.$Gas">
                <set_value name="$tempGas" exact="0" />
              </do_if>
              <do_else>
                <set_value name="$tempSolid" exact="0" />
              </do_else>
              <do_if value="$tempSolid == 0 and $tempGas == 0">
                <set_value name="$tempMine" exact="0" />
              </do_if>
            </do_elseif>
            <do_elseif value="$Waitlist == $WaitlistTrade">
              <set_value name="$tempTrade" exact="0" />
            </do_elseif>
            <do_elseif value="$Waitlist == $WaitlistBuild">
              <set_value name="$tempBuild" exact="0" />
            </do_elseif>
          </do_if>

          <!-- Sanity Check -->
          <set_value name="$sanity" operation="add" exact="1" />
          <do_if value="$sanity ge 500">
            <debug_text text="'!!!! Sanity limit reached ' + $station.knownname" chance="$DebugChance" />
            <!-- break out of do_while loop -->
            <break />
          </do_if>

          <set_value name="$totalChance" exact="$tempFight + $tempMine + $tempTrade + $tempBuild" />
        </do_while>
      </actions>
    </library>
    <library name="ShipLists_Shortages">      <!-- Phase 3 -->
      <actions>
        <!-- Calculate Resource and Industry Shortages After All Builds -->
        <do_for_each name="$size" in="$Sizes">
          <!-- Total remaining ships in waitlists for this size -->
          <set_value name="$totalWaitingShips" exact="0" />
          <do_for_each name="$type" in="$Types">
            <do_if value="$type == 'Mine'">
              <set_value name="$totalWaitingShips" operation="add" exact="@$Enhanced_Ships.$Waitlists.$Mine.$Gas.$Ships.{$size}.count" />
              <set_value name="$totalWaitingShips" operation="add" exact="@$Enhanced_Ships.$Waitlists.$Mine.$Gas.$Subordinates.{$size}.count" />
              <set_value name="$totalWaitingShips" operation="add" exact="@$Enhanced_Ships.$Waitlists.$Mine.$Solid.$Ships.{$size}.count" />
              <set_value name="$totalWaitingShips" operation="add" exact="@$Enhanced_Ships.$Waitlists.$Mine.$Solid.$Subordinates.{$size}.count" />
            </do_if>
            <do_else>
              <set_value name="$totalWaitingShips" operation="add" exact="@$Enhanced_Ships.$Waitlists.{'$' + {$type}}.$Ships.{$size}.count" />
              <set_value name="$totalWaitingShips" operation="add" exact="@$Enhanced_Ships.$Waitlists.{'$' + {$type}}.$Subordinates.{$size}.count" />
            </do_else>
          </do_for_each>

          <!-- Resource Shortage: Slots unused despite waiting ships (implies resource lack) -->
          <set_value name="$Enhanced_Industry.$ResourceShortage.{$size}" exact="[$RemainingSlots.{$size}, $totalWaitingShips].min" />

          <!-- Industry Shortage: Waiting ships exceeding available slots -->
          <set_value name="$Enhanced_Industry.$BuildShortage.{$size}" exact="[0, $totalWaitingShips - $RemainingSlots.{$size}].max" />
        </do_for_each>
      </actions>
    </library>

    <library name="Build_Stations">
      <!-- 
        $Enhanced_Stations.$Constructing = table[
          $xxl = [$station]
          $xl = [$station]
          $l = [$station]
          $Wharfs = [$station]
          $Equipment = [$station]
          $Trade = [$station]
          $Defense = [$station]
          $Pirate = [$station]
          $Factory = table[{$resource} = $station]
          $Expansion = table[{$resource} = $station]
          ]
        ]
      -->
      <actions>
        <!-- enhanced todo: non-economy pirate factions are different -->

        <!-- Calculate available construction vessels -->
        <set_value name="$pendingStations" exact="0" />
        <do_for_each valuename="$value" in="$Enhanced_Stations.$Constructing">
          <set_value name="$pendingStations" operation="add" exact="$value.count" />
        </do_for_each>
        <set_value name="$pendingCVs" exact="$Enhanced_Industry.$BuildSlots.$cv - $pendingStations" />

        <!-- category chances -->
        <set_value name="$chanceMilitary" exact="((1 - $Enhanced_Scores.$military + $Enhanced_Scores.$militaryModifier) * 100.0)i" />
        <set_value name="$chanceIndustry" exact="((1 - $Enhanced_Scores.$industry + $Enhanced_Scores.$industryModifier) * 100.0)i" />
        <set_value name="$chanceEconomy" exact="((1 - $Enhanced_Scores.$economy + $Enhanced_Scores.$economyModifier) * 100.0)i" />

        <!-- Define station priority scores -->
        <set_value name="$StationPriorityScores" exact="table[
          $Shipyards = table[
            $xxl = (($Enhanced_Industry.$BuildShortage.$xxl / [$Enhanced_Industry.$BuildSlots.$xxl, 1].max) * 100.0)i,
            $xl = (($Enhanced_Industry.$BuildShortage.$xl / [$Enhanced_Industry.$BuildSlots.$xl, 1].max) * 100.0)i,
            $l = (($Enhanced_Industry.$BuildShortage.$l / [$Enhanced_Industry.$BuildSlots.$l, 1].max) * 100.0)i
          ],
          $wharfs = ((($Enhanced_Industry.$BuildShortage.$s + $Enhanced_Industry.$BuildShortage.$m) / [$Enhanced_Industry.$BuildSlots.$s + $Enhanced_Industry.$BuildSlots.$m, 1].max) * 100.0)i,
          $equipment = if $Enhanced_Sectors.count / $Enhanced_Params.$SectorsPerStation.$equipmentDock gt $Enhanced_Stations.$Number.$equipment then 100 else 0,
          $trade = if $Enhanced_Diplomacy.$numTradePartners gt $Enhanced_Stations.$Number.$trade then $Enhanced_Params.$tradeStationPriority else 0,
          $Resources = table[]
        ]" />
        <!-- defence station priority-->
        <!-- number of defense stations per sector based on number of gates, gate closest to prime sectors receives gate first, then gates closest to enemy, gates to deadends are last -->
        <set_value name="$DefenceStations" exact="table[]" />
        <do_for_each name="$sector" valuename="$value" in="$Enhanced_Sectors">
          <!-- desired threatscore ratio-->
          <set_value name="$value" exact="1 - [1, $value.$threatscore / $value.$desiredThreatscore * ($value.$defenseStations / $value.$gates * $Enhanced_Params.$defenseStationGatePriority)].min" />
          <do_if value="$value gt 0">
            <set_value name="$total" operation="add" exact="$value" />
            <set_value name="$DefenceStations.{$sector}" exact="$value" />
          </do_if>
        </do_for_each>
        <set_value name="$StationPriorityScores.$defense" exact="$total / $DefenceStations.{$sector}.count" />

        <!-- Resource-specific priorities -->
        <do_for_each name="$resource" valuename="$Table" in="$Enhanced_Resources">
          <!-- enhanced todo: how to use unmetdemand? -->
          <set_value name="$UnmetDemand" exact="[$Table.$demand + $Table.$secondaryDemand * $Enhanced_Params.$secondaryDemandImportance - $Table.$production * $Table.$efficiency, 0].max * (1 - $Table.$saturation)" />
          <!-- extreme transportation/mining inefficiency or demand with zero production -->
          <do_if value="($Table.$efficiency lt 0.5 or @$Table.$production == 0) and $Table.$demand gt 0">
            <set_value name="$StationPriorityScores.$Resources.{$resource}" exact="table[$factory = ((1 - @$Table.$production / $Table.$demand * $Table.$efficiency) * 100.0)i]" />
            <set_value name="$numFactories" operation="add" />
          </do_if>
          <!-- production vs demand -->
          <do_elseif value="$Table.$production / $Table.$demand * $Table.$efficiency lt 0.8">
            <set_value name="$StationPriorityScores.$Resources.{$resource}" exact="table[$expansion = ((1 - @$Table.$production / $Table.$demand * $Table.$efficiency) * 100.0)i]" />
            <set_value name="$numExpansions" operation="add" />
          </do_elseif>
        </do_for_each>

        <!-- Check for zeros and calculate temp chances -->
        <set_value name="$tempMilitary" exact="if 0 == 0 + (if $Faction.hastag.pirate then $StationPriorityScores.$pirate else 0) + @$StationPriorityScores.$defense then 0 else $chanceMilitary" />
        <set_value name="$tempIndustry" exact="if 0 == 0 + $StationPriorityScores.$xxl + $StationPriorityScores.$xl + $StationPriorityScores.$l + $StationPriorityScores.$wharfs + $StationPriorityScores.$equipment then 0 else $chanceIndustry" />
        <set_value name="$tempEconomy" exact="if 0 == 0 + $StationPriorityScores.$trade + $numExpansions + $numFactories then 0 else $chanceEconomy" />

        <!-- Create stations -->
        <set_value name="$totalChance" exact="$tempMilitary + $tempIndustry + $tempEconomy" />
        <do_while value="$pendingCVs ge 0 and $totalChance gt 0">
          <!-- Select category based on weighted chance -->
          <do_any>
            <set_value name="$category" exact="'military'" weight="$tempMilitary" />
            <set_value name="$category" exact="'industry'" weight="$tempIndustry" />
            <set_value name="$category" exact="'economy'" weight="$tempEconomy" />
          </do_any>

          <!-- Select specific type -->
          <do_if value="$category == 'military'">
            <do_any>
              <set_value name="$type" exact="'defense'" weight="$StationPriorityScores.$defense" />
              <set_value name="$type" exact="'expansion'" weight="" />
            </do_any>
            <!-- -->
            <do_if value="$type == 'defense'">
              <!-- prefer sectors with zero defence stations and those with higher strategic value -->
              <set_value name="$sector" exact="" />
            </do_if>
            <do_else> <!-- expansion / invasion -->
              <!-- when $atWar expand into contested sector otherwise adjacent ownerless sector with highest strategic value that is not a neutralzone -->
              <set_value name="$sector" exact="" />
            </do_else>
            <!-- library: build defence station -->
            <do_if value="$built">
              <do_if value="$DefenceStations.count == 1 or ($Enhanced_State.$current == 'CONSOLIDATE' and not $Enhanced_State.$atWar)">
                <set_value name="$tempMilitary" exact="0" />
              </do_if>
              <do_else>
                <set_value name="$StationPriorityScores.$defense" operation="subtract" exact="$value / $DefenceStations.count" />
                <remove_value name="$DefenceStations.{$sector}" />
              </do_else>
            </do_if>
          </do_if>

          <do_elseif value="$category == 'industry'">
            <do_any>
              <set_value name="$type" exact="'xxl'" weight="$StationPriorityScores.$xxl" />
              <set_value name="$type" exact="'xl'" weight="$StationPriorityScores.$xl" />
              <set_value name="$type" exact="'l'" weight="$StationPriorityScores.$l" />
              <set_value name="$type" exact="'wharfs'" weight="$StationPriorityScores.$wharfs" />
              <set_value name="$type" exact="'equipment'" weight="$StationPriorityScores.$equipment" />
            </do_any>
            <!-- shipyards prefer sectors with other shipyards; wharfs are less picky and prefer to not be in the same sector; equipmentdocks are spread throughout the faction -->
            <set_value name="$sector" exact="" />
            <!-- build industry station / expansion -->
            <do_if value="$built">
              <set_value name="$StationPriorityScores.{'$'+$type}" exact="0" />
              <do_if value="0 == $StationPriorityScores.$xxl + $StationPriorityScores.$xl + $StationPriorityScores.$l + $StationPriorityScores.$wharfs + $StationPriorityScores.$equipment">
                <set_value name="$tempIndustry" exact="0" />
              </do_if>
            </do_if>
          </do_elseif>
          <do_else> <!-- economy -->
            <!-- generate average resource score -->
            <do_if value="$averageResourceScore == null">
              <do_for_each valuename="$Table" in="$StationPriorityScores.$Resources">
                <set_value name="$total" operation="add" exact="@$Table.$factory + @$Table.$expansion" />
              </do_for_each>
              <set_value name="$averageResourceScore" exact="$total / $StationPriorityScores.$Resources.count" />
            </do_if>

            <do_any>
              <set_value name="$type" exact="'trade'" weight="$StationPriorityScores.$trade" />
              <set_value name="$type" exact="'factory'" weight="$averageResourceScore" />
            </do_any>
            <do_if value="$type == 'trade'">
              <!-- sector scoring: more gates, distance from from other tradestations (if any), near $Enhanced_Diplomacy.$TradePartnersWithoutTS (table) -->
              <set_value name="$sector" exact="" />
              <!-- build trade station / expansion -->
              <do_if value="$built">
                <set_value name="$StationPriorityScores.$trade" exact="0" />
              </do_if>
            </do_if>

            <do_elseif value="$type == 'factory'">
              <!-- prepare tableofweights for dynamic weighted choice -->
              <set_value name="$TableOfWeights" exact="table[]" />
              <do_for_each name="$key" valuename="$Table" in="$StationPriorityScores.$Resources">
                <set_value name="$TableOfWeights.{$key}" exact="@$Table.$factory + @$Table.$expansion" />
              </do_for_each>
              <do_while value="$TableOfWeights.count > 0">
                <run_actions ref="md.FactionLogic_Enhanced_Tasks.DynamicDoAny" result="$resource">
                  <param name="TableOfWeights" value="$TableOfWeights" />
                </run_actions>

                <do_if value="$StationPriorityScores.$Resources.{$resource}.$factory">
                  <set_value name="$type" exact="'factory'" />
                  <!-- find sectors demanding resource and sectors providing supply -->
                  <set_value name="$sector" exact="" />
                  <!-- library: build factory in sector -->
                  <set_value name="$numFactories" operation="subtract" />
                  <set_value name="$value" exact="$StationPriorityScores.$Resources.{$resource}.$factory" />
                </do_if>
                <do_else>
                  <set_value name="$type" exact="'expansion'" />
                  <!-- find sectors demanding resource and sectors providing supply, add to sector with highest demand/supply; needs sector scoring -->
                  <set_value name="$sector" exact="" />
                  <!-- library: build factory in sector -->
                  <set_value name="$numExpansions" operation="subtract" />
                  <set_value name="$value" exact="$StationPriorityScores.$Resources.{$resource}.$expansion" />
                </do_else>
                <do_if value="$built">
                  <do_if value="$StationPriorityScores.$Resources.count == 1">
                    <set_value name="$averageResourceScore" exact="0" />
                  </do_if>
                  <do_else>
                    <set_value name="$averageResourceScore" operation="subtract" exact="$value / $StationPriorityScores.$Resources.count" />
                  </do_else>
                  <remove_value name="$StationPriorityScores.$Resources.{$resource}" />
                  <break />
                </do_if>
                <do_else>
                  <remove_value name="$TableOfWeights.{$resource}" />
                </do_else>
              </do_while>
            </do_elseif>
          </do_else>
          <do_if value="$built">
            <set_value name="$pendingCVs" operation="subtract" />
          </do_if>
          <do_elseif value="$noCV">
            <!-- add cv to ship waitlist -->
          </do_elseif>
          <!-- Recalculate chances -->
          <set_value name="$totalChance" exact="$tempMilitary + $tempIndustry + $tempEconomy" />
        </do_while>
      </actions>
    </library>
  </cues>
</mdscript>