Economy Score Inputs:
calculate_resource_score(availability, on_hand, extraction_rate, transport_efficiency, demand, saturation, trade_impact):

    Availability:
        Formula: availability = sum([sector.resource_amount for sector in sectors]) / len(sectors)
        Where sectors is a list of sector objects with resource_amount property.
    On Hand:
        Formula: on_hand = min(resource.stockpile, resource.max_storage) for resource in resources
        resources is a list of resource objects each with stockpile and max_storage properties.
    Extraction Rate:
        Formula: extraction_rate = sum([extractor.efficiency for extractor in extractors]) / (len(extractors) * max_extractor_efficiency)
        extractors is a list of extractor objects with an efficiency property, max_extractor_efficiency is a constant.
    Transport Efficiency:
        Formula: transport_efficiency = sum([ship.load_capacity for ship in transport_ships]) / (sum([route.distance for route in trade_routes]) * piracy_risk_factor)
        transport_ships list with load_capacity, trade_routes with distance, piracy_risk_factor is a constant.
    Demand:
        Formula: demand = sum([demand.demand_amount for demand in internal_demands]) + sum([trade.demand for trade in export_trades]) - sum([trade.demand for trade in import_trades])
        Lists of internal_demands, export_trades, and import_trades with respective demand properties.
    Saturation:
        Formula: saturation = sum([market.supply for market in markets]) / (len(markets) * market_capacity_threshold)
        markets list where each has a supply property, market_capacity_threshold is a constant.
    Trade Impact:
        Formula: trade_impact = (sum([trade.bonus for trade in positive_trades]) - sum([trade.penalty for trade in negative_trades])) / max_trade_impact
        positive_trades and negative_trades are lists with bonus and penalty properties, max_trade_impact constant.


Military Score Inputs:
military_score(defensive_structures, defensive_ships, offensive_ships, logistics, intelligence):

    Defensive Structures:
        Formula: defensive_structures = sum([station.defense_value for station in defense_stations])
        defense_stations is a list of station objects with defense_value.
    Defensive Ships:
        Formula: defensive_ships = sum([ship.defense_power for ship in patrol_ships])
        patrol_ships list with defense_power.
    Offensive Ships:
        Formula: offensive_ships = sum([ship.attack_power for ship in combat_fleet])
        combat_fleet list with attack_power.
    Logistics:
        Formula: logistics = sum([route.security for route in supply_routes]) / (len(supply_routes) * max_logistics_score)
        supply_routes list with security, max_logistics_score constant.
    Intelligence:
        Formula: intelligence = (sum([spy.success_rate for spy in espionage_agents]) + sum([recon.effectiveness for recon in recon_missions])) / (len(espionage_agents) + len(recon_missions))
        espionage_agents with success_rate, recon_missions with effectiveness.


Industry Score Inputs:
ship_type_score(demand, production_capacity, current_production, upgrade_potential):

    Demand:
        Formula: demand = sum([need.amount for need in ship_needs])
        ship_needs list where each need has an amount.
    Production Capacity:
        Formula: production_capacity = sum([yard.capacity for yard in shipyards]) / (len(shipyards) * max_yard_capacity)
        shipyards list with capacity, max_yard_capacity constant.
    Current Production:
        Formula: current_production = len([ship for ship in ships_under_construction])
        ships_under_construction is a list of ships being built.
    Upgrade Potential:
        Formula: upgrade_potential = sum([upgrade.benefit for upgrade in possible_upgrades]) / len(fleet_ships)
        possible_upgrades list with benefit, fleet_ships list of all ships.


station_building_score(demand, construction_ships, resource_availability, construction_speed):

    Demand:
        Formula: demand = sum([station.demand for station in planned_stations])
        planned_stations list with demand property.
    Construction Ships:
        Formula: construction_ships = sum([ship.efficiency for ship in construction_fleet])
        construction_fleet list with efficiency.
    Resource Availability:
        Formula: resource_availability = sum([resource.amount for resource in construction_resources]) / sum([resource.required for resource in station_requirements])
        construction_resources available resources, station_requirements needed resources for construction.
    Construction Speed:
        Formula: construction_speed = sum([station.time_to_build for station in building_stations]) / (len(building_stations) * min_build_time)
        building_stations list with time_to_build, min_build_time constant.