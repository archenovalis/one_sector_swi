<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionLogic_Enhanced" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../xsd/md.xsd">
  <cues>
    <!-- Manager Variables
      global.$EnhancedLogic.$NeutralZones = group[sector] (ownerless sectors adjacent to owned sectors)
      
      $Enhanced_State = string ('EXPANSION', 'CONSOLIDATE', 'DEFENSE', 'WAR_INVADE', 'WAR_DEFENSE', 'WAR_CONSOLIDATE')
      $Enhanced_PreviousState = string ('EXPANSION', 'CONSOLIDATE', 'DEFENSE', 'WAR_INVADE', 'WAR_DEFENSE', 'WAR_CONSOLIDATE')
      $Enhanced_Scores = table[
        $economy = float
        $military = float
        $industry = float
      ]

      (dynamic)
      $Enhanced_BuildPriority = table[
        $Buildmodules = table[]
        $Productionmodules = table[]
        $Ships = table[]
      ]

      (set by process station; static)
      $Enhanced_IndustryBuildSlots = table[
        $s = int
        $m = int
        $l = int
        $xl = int
        $xxl = int
        $cv = int
        $planet = int
      ]

      (when build queue has resources available to initiate a waiting build but not build slots available; dynamic)
      $Enhanced_IndustryBuildShortage = table[
        $s = int
        $m = int
        $l = int
        $xl = int
        $xxl = int
        $station = int
      ]

      $Enhanced_PrimeSectors = group[sector] (stations that have ship buildmodules)
      $Enhanced_ColonySectors = group[sector] (sectors with colonies)
      
      $Enhanced_Resources = table[
        {$resource} = table[
          $available = largeint (faction-wide availability)
          $production = int (faction-wide productionmodule products)
          $on_hand = int (faction-wide resources stored in stations)
          $demand = int (faction-wide productionmodule demand, not secondary)
          $secondaryDemand = int (faction-wide productionmodule secondary demand)
          $saturation = float ($on_hand / $demand)
          $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
          * $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
        ]
      ]

      $Enhanced_Sectors = table[
        {$sector} = table[
          $Values = table[
            $economic = int (dynamic)
            $resource = int (static)
            $stategic = int (dynamic)
          ]
          $Resources = table[
            $sunlight = float (static)
            {$resource} = int (static)
          ]
          $NumProductionModules = table[
            {$moduletype} = int (static)
          ]
          $NumBuildModules = table[
            {$moduletype} = int (static)
          ]
          $desiredThreatscore = int (dynamic)
          enhanced todo: $Enhanced_PirateActivity = float (0 through 1) (when ships are destroyed by pirate faction within the sector; dynamic)
        ]
      ]
      
      $Enhanced_Ships = table[
        $Mining = table[
          {$ware} = int (static)
        ],
        $Transporting = table[
          {$ware} = int (static)
        ]
        $Construction = int (number of construction vessels; static)
      ]

      $Enhanced_Stations = table[
        {$station} = table[
          $isPlanetaryTradestation = bool (static)
          $Demands = table[
            {$resource} = int (per hour) (static)
          ]
          $Products = table[
            {$product} = int (per hour) (static)
          ]
          $Secondary = table[
            {$resource} = int (per hour) (static)
          ]
          $On_hand = table[
            {$resource} = int (resource stored in station) (dynamic)
          $workforceBonus = float (dynamic)
        ] 
      ]
      -->
    <cue name="Init">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start" />
      </conditions>
      <delay exact="1ms" />
      <actions>
        <set_value name="$DebugChance" exact="100" />
        <create_group groupname="$NeutralZones" />
        <set_value name="global.$EnhancedLogic" exact="table[
          $NeutralZones = $NeutralZones
          $GalaxyResourceAverages = table[
            ware.ore = 0L,
            ware.hydrogen = 0L,
            ware.ice = 0L,
            ware.silicon = 0L,
            ware.helium = 0L,
            ware.nividium = 0L,
            ware.methane = 0L
          ]
        ]" />
        <!-- get galaxy resources -->
        <find_sector name="$sectors" space="player.galaxy" multiple="true" />
        <do_for_each name="$sector" in="$sectors">
          <do_for_each name="$resource" in="$sector.averagemaxyield">
            <set_value name="global.$EnhancedLogic.$GalaxyResourceAverages.{$resource}" operation="add" exact="$sector.averagemaxyield.{$resource}" />
          </do_for_each>
        </do_for_each>
        <do_for_each name="$resource" in="global.$EnhancedLogic.$GalaxyResourceAverages">
          <set_value name="global.$EnhancedLogic.$GalaxyResourceAverages.{$resource}" exact="global.$EnhancedLogic.$GalaxyResourceAverages.{$resource} / ($sectors.count)L" />
        </do_for_each>
        <remove_value name="$sectors" />
        <!-- get build module docks -->
        <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks" exact="table[]" />
        <get_module_definition macro="$buildmoduleMacros" tags="tag.build" multiple="true" />
        <do_for_each name="$macro" in="$buildmoduleMacros">
          <do_if value="@global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro} == null">
            <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}" exact="table[]" />
          </do_if>
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$s" exact="@$macro.numdocks.{tag.dock_s}" />
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$m" exact="@$macro.numdocks.{tag.dock_m}" />
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$l" exact="@$macro.numdocks.{tag.dock_l}" />
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$xl" exact="@$macro.numdocks.{tag.dock_xl}" />
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$xxl" exact="@$macro.numdocks.{tag.dock_xxl}" />
        </do_for_each>
        <!-- get galaxy production module demand per hour and base products per hour -->
        <set_value name="global.$EnhancedLogic.$ProductionDemandOutput" exact="null" />
        <raise_lua_event name="'oneSector.assessProductionDemandOutput'" />
      </actions>
      <cues>
        <!-- Set Static Values -->
        <library name="Process_Objects">
          <actions>
            <!-- sectors -->
            <find_sector name="$Sectors" trueowner="$Faction" multiple="true" />
            <do_for_each name="$sector" in="$Sectors">
              <run_actions ref="Process_Sector">
                <param name="Faction" value="$Faction" />
                <param name="sector" value="$sector" />
              </run_actions>
            </do_for_each>

            <!-- stations -->
            <find_station_by_true_owner name="$stations" faction="$Faction" space="player.galaxy" multiple="true" />
            <do_for_each name="$station" in="$stations">
              <run_actions ref="Process_Station">
                <param name="Faction" value="$Faction" />
                <param name="station" value="$station" />
              </run_actions>
            </do_for_each>

            <!-- ships -->
            <do_for_each name="$purpose" in="[purpose.trade, purpose.mine]">
              <find_ship_by_true_owner name="$Ships" faction="$Faction" space="player.galaxy" multiple="true" primarypurpose="$purpose" />
              <do_for_each name="$ship" in="$Ships">
                <run_actions ref="Process_Ship">
                  <param name="Faction" value="$Faction" />
                  <param name="ship" value="$ship" />
                </run_actions>
              </do_for_each>
            </do_for_each>
          </actions>
        </library>
        <library name="Process_Sector" purpose="run_actions"> <!-- requires: $Faction and $sector-->
          <params>
            <param name="Faction" />
            <param name="sector" />
          </params>
          <actions>
            <set_value name="$Manager" exact="global.$FactionManagers.{$Faction}" />
            <set_value name="$Enhanced_Sectors" exact="$Manager.$Enhanced_Sectors" />
            <set_value name="$Enhanced_Resources" exact="$Manager.$Enhanced_Resources" />
            <set_value name="$Enhanced_SectorWeights" exact="$Manager.$Enhanced_SectorWeights" />
            <set_value name="$Enhanced_PrimeSectors" exact="$Manager.$Enhanced_PrimeSectors" />
            <set_value name="$Enhanced_Values" exact="$Manager.$Enhanced_Values" />
            <do_if value="@$Enhanced_Sectors.{$sector} == null">
              <set_value name="$Enhanced_Sectors.{$sector}" exact="table[
                  $Values = table[],
                  $Resources = table[],
                  $NumProductionModules = table[],
                  $NumBuildModules = table[]
                ]" />
            </do_if>
            <set_value name="$SectorData" exact="$Enhanced_Sectors.{$sector}" />
            <set_value name="$SectorData.$desiredThreatscore" exact="0" />
            <include_actions ref="Process_Resource_Value" />
            <include_actions ref="Process_Mining_EfficiencyRatio" />
            <include_actions ref="Update_Sector" />
          </actions>
        </library>
        <library name="Process_Resource_Value">
          <!-- applicable variables
          $Enhanced_Sectors = table[
            {$sector} = table[
              * $Values = table[
                $economic = int (dynamic)
                * $resource = int (static)
                $stategic = int (dynamic)
              ]
              * $Resources = table[
                $sunlight = float (static)
                {$resource} = int (static)
              ]
              $NumProductionModules = table[
                {$moduletype} = int (static)
              ]
              $NumBuildModules = table[
                {$moduletype} = int (static)
              ]
              $desiredThreatscore = int (dynamic)
            ]
          ]
          $Enhanced_Resources = table[
            {$resource} = table[
              $available = largeint (faction-wide availability)
              $production = int (faction-wide productionmodule products)
              $on_hand = int (faction-wide resources stored in stations)
              $demand = int (faction-wide productionmodule demand, not secondary)
              $secondaryDemand = int (faction-wide productionmodule secondary demand)
              $saturation = float ($on_hand / $demand)
              $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
              $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
            ]
          ]

          def Get_Resource_Value(self, resources):
            # Calculates resource value based on available resources
            return sum(resource.amount * resource.demand for resource in resources) if resources else 0 
          -->
          <actions>
            <debug_text text="'sunlight: '+$sector.sunlight" chance="$DebugChance" />
            <set_value name="$value" exact="$sector.sunlight" />
            <set_value name="$SectorData.$Resources.$sunlight" exact="$value" />
            <debug_text text="'resources: '+$sector.averagemaxyield" chance="$DebugChance" />
            <do_for_each name="$resource" in="$sector.averagemaxyield">
              <do_if value="@$Enhanced_Resources.{$resource} == null">
                <set_value name="$Enhanced_Resources.{$resource}" exact="table[]" />
              </do_if>
              <debug_text text="'$score exact=$sector.averagemaxyield.{$resource} / global.$EnhancedLogic.$GalaxyResourceAverages.{$resource} : '+ $score + ' = '+$sector.averagemaxyield.{$resource} / global.$EnhancedLogic.$GalaxyResourceAverages.{$resource}" chance="$DebugChance" />
              <set_value name="$average" exact="$sector.averagemaxyield.{$resource}" />
              <!-- set resource amount -->
              <set_value name="$SectorData.$Resources.{$resource}" exact="$average" />
              <set_value name="$Enhanced_Resources.{$resource}.$Available" operation="add" exact="$average" />
              <!-- add resource value -->
              <set_value name="$resourceValue" exact="$average / global.$EnhancedLogic.$GalaxyResourceAverages.{$resource}" />
              <set_value name="$value" operation="add" exact="$resourceValue" />
              <debug_text text="$resource.knownname+' resourceValue: '+$resourceValue+' | '+$average" chance="$DebugChance" />
            </do_for_each>
            <set_value name="$SectorData.$Values.$resource" exact="$value" />
            <debug_text text="'Get_Resource_Value (is it a good threatscore?): '+$value" chance="$DebugChance" />
          </actions>
        </library>
        <library name="Process_Mining_EfficiencyRatio">
          <actions>
            <!-- get minable resource efficiency ratios (static) -->
            <get_ware_definition result="$gas" group="gasses" />
            <get_ware_definition result="$solid" tags="[tag.solid, tag.minable]" />
            <do_for_each name="$list" in="[$gas, $solid]">
              <do_for_each name="$resource" in="$list">
                <do_if value="@$Enhanced_Resources.{$resource} == null">
                  <set_value name="$Enhanced_Resources.{$resource}" exact="table[$available=0]" />
                </do_if>
                <set_value name="$resourceSum" operation="add" exact="$Enhanced_Resources.{$resource}.$available" />
              </do_for_each>
              <do_for_each name="$resource" in="$list">
                <set_value name="$Enhanced_Resources.{$resource}.$efficiencyRatio" exact="$Enhanced_Resources.{$resource}.$available / $resourceSum" />
              </do_for_each>
            </do_for_each>
          </actions>
        </library>
        <!-- end Process_Sector -->
        <library name="Process_Ship" purpose="run_actions"> <!-- requires: $Faction and $ship | optional: $remove -->
          <params>
            <param name="Faction" />
            <param name="ship" />
            <param name="remove" default="false" />
          </params>
          <!-- relevant variables
          $Enhanced_Ships = table[
            $Mining = table[
              {$ware} = int
            ],
            $Transporting = table[
              {$ware} = int
            ]
            $Construction = int
          ] -->
          <actions>
            <do_if value="$remove">
              <set_value name="$removal" exact="-1" />
            </do_if>
            <do_else>
              <set_value name="$removal" exact="1" />
            </do_else>

            <set_value name="$Manager" exact="global.$FactionManagers.{$Faction}" />
            <set_value name="$Enhanced_Ships" exact="$Manager.$Enhanced_Ships" />
            <set_value name="$Enhanced_Sectors" exact="$Manager.$Enhanced_Sectors" />

            <do_if value="$ship.primarypurpose == purpose.fight">
              <set_value name="$Enhanced_Sectors.{$ship.jobmainsector}.$threatscore" operation="add" exact="$ship.threatscore * $removal" />
            </do_if>

            <do_elseif value="$ship.primarypurpose == purpose.trade or $ship.primarypurpose == purpose.mine">
              <set_value name="$class" exact="$ship.class" />
              <do_if value="$class == class.size_m">
                <set_value name="$value" exact="1" />
              </do_if>
              <do_elseif value="$class == class.size_l">
                <set_value name="$value" exact="3" />
              </do_elseif>
              <do_elseif value="$class == class.size_xl">
                <set_value name="$value" exact="5" />
              </do_elseif>

              <do_if value="$ship.primarypurpose == purpose.trade">
                <do_for_each name="$ware" in="$ship.warebasket">
                  <set_value name="$Enhanced_Ships.$Transporting.{$ware}" operation="add" exact="$value * $removal" />
                </do_for_each>
              </do_if>

              <do_elseif value="$ship.primarypurpose == purpose.mine">
                <do_for_each name="$ware" in="$ship.warebasket">
                  <set_value name="$Enhanced_Ships.$Mining.{$ware}" operation="add" exact="$value * $removal" />
                </do_for_each>
              </do_elseif>
              <include_actions ref="Process_Efficiencies" />
            </do_elseif>
            <do_elseif value="$ship.primarypurpose == purpose.build">
              <set_value name="$Enhanced_Ships.$Construction" operation="add" exact="1 * $removal" />
            </do_elseif>
          </actions>
        </library>
        <library name="Process_Efficiencies">
          <!-- relevant variables
            $Enhanced_Resources = table[
              {$resource} = table[
                $available = largeint (faction-wide availability)
                $production = int (faction-wide productionmodule products)
                $on_hand = int (faction-wide resources stored in stations)
                $demand = int (faction-wide productionmodule demand, not secondary)
                $secondaryDemand = int (faction-wide productionmodule secondary demand)
                $saturation = float ($on_hand / $demand)
                * $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
                * $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
              ]
            ]

            $Enhanced_Ships = table[
              $Mining = table[
                {$resource} = int (number of ships that mine this resource) (static)
              ],
              $Transporting = table[
                {$resource} = int (number of ships that can carry this resource) (static)
              ]
            ]
          -->
          <actions>
            <set_value name="$Enhanced_Resources" exact="$Manager.$Enhanced_Resources" />
            <do_for_each name="$resource" in="$Enhanced_Resources">
              <!-- mining efficiency -->
              <do_if value="$ship.primarypurpose == purpose.mine">
                <set_value name="$Enhanced_Resources.{$resource}.$efficiency"
                  exact="$Enhanced_Ships.$Mining.{$resource} * $Enhanced_Resources.{$resource}.$efficiencyRatio" />
              </do_if>
              <!-- transportation efficiency -->
              <do_elseif value="$ship.primarypurpose == purpose.trade">
                <set_value name="$Enhanced_Resources.{$resource}.$efficiency"
                  exact="$Enhanced_Ships.$Transporting.{$resource} * $Enhanced_Resources.{$resource}.$efficiencyRatio" />
              </do_elseif>
            </do_for_each>
          </actions>
        </library>
        <!-- end Process_Ship -->
        <library name="Process_Station" purpose="run_actions"> <!-- requires: $Faction and $station | optional: $remove or $module -->
          <params>
            <param name="Faction" />
            <param name="station" />
            <param name="remove" default="false" />
            <param name="module" default="null" comment="process station's new module" />
          </params>
          <!-- applicable variables
          $Enhanced_Sectors = table[
            {$sector} = table[
              $Values = table[
                $economic = int (dynamic)
                $resource = int (static)
                $stategic = int (dynamic)
              ]
              * $NumProductionModules = table[
                {$moduletype} = int (static)
              ]
              * $NumBuildModules = table[
                {$moduletype} = int (static)
              ]
              $desiredThreatscore = int (dynamic)
            ]
          ]
          
          Demands and products table:
          global.$EnhancedLogic.$ProductionDemandOutput.{$module.macro} = table[
            $Demands = table[
              {$resource} = int (number per hour)
            ],
            $Products = table[
              {$product = int (number per hour)
            ],
            $Secondary = table[
              {$resource} = int (number per hour)
            ]
          ]
            
          $Enhanced_Stations = table[
            {$station} = table[
              * $isPlanetaryTradestation = bool (static)
              * $Demands = table[
                {$resource} = int (per hour) (static)
              ]
              * $Products = table[
                {$product} = int (per hour) (static)
              ]
              * $Secondary = table[
                {$resource} = int (per hour) (static)
              ]
              $On_hand = table[
                {$resource} = int (resource stored in station) (dynamic)
              $workforceBonus = float (dynamic)
            ] 
          ]
          
          $Enhanced_Resources = table[
            {$resource} = table[
              $available = largeint (faction-wide availability)
              * $production = int (faction-wide productionmodule products)
              $on_hand = int (faction-wide resources stored in stations)
              * $demand = int (faction-wide productionmodule demand, not secondary)
              * $secondaryDemand = int (faction-wide productionmodule secondary demand)
              $saturation = float ($on_hand / $demand)
              $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
              $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
            ]
          ]
          -->
          <actions>
            <do_if value="$remove">
              <set_value name="$removal" exact="-1" />
            </do_if>
            <do_else>
              <set_value name="$removal" exact="1" />
            </do_else>

            <set_value name="$Manager" exact="global.$FactionManagers.{$Faction}" />
            <set_value name="$Enhanced_Sectors" exact="$Manager.$Enhanced_Sectors" />
            <set_value name="$sector" exact="$station.sector" />
            <do_if value="@$Enhanced_Sectors.{$sector} == null">
              <set_value name="$Enhanced_Sectors.{$sector}" exact="table[
                  $Values = table[],
                  $Resources = table[],
                  $NumProductionModules = table[],
                  $NumBuildModules = table[]
                ]" />
            </do_if>
            <set_value name="$SectorData" exact="Enhanced_Sectors.{$sector}" />
            <!-- apply defense station's threatscore to sector -->
            <do_if value="$station.isdefencestation">
              <set_value name="$SectorData.$threatscore" operation="add" exact="$station.threatscore * $removal" />
            </do_if>
            <!-- process production stations -->
            <do_else>
              <set_value name="$Enhanced_Stations" exact="$Manager.$Enhanced_Stations" />
              <set_value name="$Enhanced_Resources" exact="$Manager.$Enhanced_Resources" />
              <set_value name="$ProdValues" exact="global.$EnhancedLogic.$ProductionDemandOutput" />
              <!-- add station to stations table -->
              <do_if value="@$Enhanced_Stations.{$station} == null">
                <set_value name="$Enhanced_Stations.{$station}" exact="table[
                  $Demands = table[],
                  $Products = table[],
                  $Secondary = table[],
                  $On_hand = table[]
                ]" />
              </do_if>
              <set_value name="$StationData" exact="$Enhanced_Stations.{$station}" />
              <get_object_value object="$station" result="$stationvalue" />
              <set_value name="$SectorData.$Values.$economic" operation="add" exact="$stationvalue * $removal" />
              <!-- process new module -->
              <do_if value="@$module">
                <set_value name="$macro" exact="$module.macro" />
                <do_if value="$module.class.production">
                  <set_value name="$ModuleData" exact="$ProdValues.{$macro}" />
                  <!-- add module to sector -->
                  <set_value name="$SectorData.$NumProductionModules.{$macro}" operation="add" exact="1" />
                  <!-- add demands and products to station and faction -->
                  <do_for_each name="$demand" in="$ModuleData.$Demands">
                    <set_value name="$StationData.$Demands.{$demand}" operation="add" exact="$ModuleData.$Demands.{$demand}" />
                    <do_if value="@$Enhanced_Resources.{$demand} == null">
                      <set_value name="$Enhanced_Resources.{$demand}" exact="table[]" />
                    </do_if>
                    <set_value name="$Enhanced_Resources.{$demand}.$demand" operation="add" exact="$ModuleData.$Demands.{$demand}" />
                  </do_for_each>
                  <do_for_each name="$product" in="$ModuleData.$Products">
                    <set_value name="$StationData.$Products.{$product}" operation="add" exact="$ModuleData.$Products.{$product}" />
                    <do_if value="@$Enhanced_Resources.{$product} == null">
                      <set_value name="$Enhanced_Resources.{$product}" exact="table[]" />
                    </do_if>
                    <set_value name="$Enhanced_Resources.{$product}.$production" operation="add" exact="$ModuleData.$Products.{$product}" />
                  </do_for_each>
                  <do_for_each name="$secondary" in="$ModuleData.$Secondary">
                    <set_value name="$StationData.$Secondary.{$secondary}" operation="add" exact="$ModuleData.$Secondary.{$secondary}" />
                    <do_if value="@$Enhanced_Resources.{$secondary} == null">
                      <set_value name="$Enhanced_Resources.{$secondary}" exact="table[]" />
                    </do_if>
                    <set_value name="$Enhanced_Resources.{$secondary}.$secondaryDemand" operation="add" exact="$ModuleData.$Secondary.{$secondary}" />
                  </do_for_each>
                </do_if>
                <do_elseif value="$module.class.buildmodule">
                  <set_value name="$SectorData.$NumBuildModules.{$macro}" operation="add" exact="1" />
                  <!-- add module to sector -->
                  <set_value name="$Slots.$s" operation="add" exact="@$macro.numdocks.{tag.dock_s)" />
                  <set_value name="$Slots.$m" operation="add" exact="@$macro.numdocks.{tag.dock_m)" />
                  <set_value name="$Slots.$l" operation="add" exact="@$macro.numdocks.{tag.dock_l)" />
                  <set_value name="$Slots.$xl" operation="add" exact="@$macro.numdocks.{tag.dock_xl)" />
                  <set_value name="$Slots.$xxl" operation="add" exact="@$macro.numdocks.{tag.dock_xxl)" />
                </do_elseif>
              </do_if>
              <!-- process entire station -->
              <do_else>
                <do_if value="@md.OneSector_PlanetaryAid.Init.exists and @md.OneSector_PlanetaryAid.Init.$PlanetaryTradestation.indexof.{$station}">
                  <set_value name="$StationData.$isPlanetaryTradestation" exact="true" />
                </do_if>
                <!-- production modules -->
                <do_for_each name="$production" in="$station.productions">
                  <do_if value="@$SectorData.$NumProductionModules == null">
                    <set_value name="$SectorData.$NumProductionModules" exact="table[]" />
                  </do_if>
                  <set_value name="$macro" exact="$production.macro" />
                  <set_value name="$ModuleData" exact="$ProdValues.{$macro}" />
                  <!-- add module to sector -->
                  <set_value name="$SectorData.$NumProductionModules.{$macro}" operation="add" exact="1 * $removal" />
                  <!-- add demands and products to station and faction -->
                  <do_for_each name="$demand" in="$ModuleData.$Demands">
                    <set_value name="$StationData.$Demands.{$demand}" operation="add" exact="$ModuleData.$Demands.{$demand} * $removal" />
                    <do_if value="@$Enhanced_Resources.{$demand} == null">
                      <set_value name="$Enhanced_Resources.{$demand}" exact="table[]" />
                    </do_if>
                    <set_value name="$Enhanced_Resources.{$demand}.$demand" operation="add" exact="$ModuleData.$Demands.{$demand} * $removal" />
                  </do_for_each>
                  <do_for_each name="$product" in="$ModuleData.$Products">
                    <set_value name="$StationData.$Products.{$product}" operation="add" exact="$ModuleData.$Products.{$product} * $removal" />
                    <do_if value="@$Enhanced_Resources.{$product} == null">
                      <set_value name="$Enhanced_Resources.{$product}" exact="table[]" />
                    </do_if>
                    <set_value name="$Enhanced_Resources.{$product}.$production" operation="add" exact="$ModuleData.$Products.{$product} * $removal" />
                  </do_for_each>
                  <do_for_each name="$secondary" in="$ModuleData.$Secondary">
                    <set_value name="$StationData.$Secondary.{$secondary}" operation="add" exact="$ModuleData.$Secondary.{$secondary} * $removal" />
                    <do_if value="@$Enhanced_Resources.{$secondary} == null">
                      <set_value name="$Enhanced_Resources.{$secondary}" exact="table[]" />
                    </do_if>
                    <set_value name="$Enhanced_Resources.{$secondary}.$secondaryDemand" operation="add" exact="$ModuleData.$Secondary.{$secondary} * $removal" />
                  </do_for_each>
                </do_for_each>
                <!-- build modules -->
                <set_value name="$Slots" exact="$Manager.$Enhanced_IndustryBuildSlots" />
                <do_for_each name="$buildModule" in="$station.buildmodules">
                  <set_value name="$macro" exact="$buildModule.macro" />
                  <!-- add module to sector -->
                  <do_if value="@$SectorData.$NumBuildModules == null">
                    <set_value name="$SectorData.$NumBuildModules" exact="table[]" />
                  </do_if>
                  <set_value name="$SectorData.$NumBuildModules.{$macro}" operation="add" exact="1 * $removal" />
                  <!-- add build slots to faction  -->
                  <set_value name="$Slots.$s" operation="add" exact="@$macro.numdocks.{tag.dock_s) * $removal" />
                  <set_value name="$Slots.$m" operation="add" exact="@$macro.numdocks.{tag.dock_m) * $removal" />
                  <set_value name="$Slots.$l" operation="add" exact="@$macro.numdocks.{tag.dock_l) * $removal" />
                  <set_value name="$Slots.$xl" operation="add" exact="@$macro.numdocks.{tag.dock_xl) * $removal" />
                  <set_value name="$Slots.$xxl" operation="add" exact="@$macro.numdocks.{tag.dock_xxl) * $removal" />
                </do_for_each>
                <!-- get dynamic values (workforceBonus, resources/products in station cargo) -->
                <do_if value="$remove">
                  <remove_value name="$Enhanced_Stations.{$station}" />
                </do_if>
                <do_else>
                  <include_actions ref="Update_Station" />
                </do_else>
              </do_else>
              <include_actions ref="Process_Transportation_EfficiencyRatio" />
            </do_else>
            <!-- enhanced todo: add colony check -->
            <!-- note: if no stations remain in sector, then remove sector -->
            <do_if value="$remove">
              <find_station_by_true_owner name="$one" faction="$Faction" space="$sector" checkoperational="false">
                <match state="componentstate.wreck" negate="true" />
              </find_station_by_true_owner>
              <do_if value="$one == null">
                <remove_value name="$Enhanced_Sectors.{$sector}" />
              </do_if>
            </do_if>
          </actions>
        </library>
        <library name="Process_Transportation_EfficiencyRatio">
          <actions>
            <!-- get demand ratio for transportation
              run when demand changes

              transport and mining efficiency are also static because they only need to be calculated when a ship is built/destroyed
            
            transportationEfficiencyRatio

            - calculate transportation efficiency -
            - consider demand, volume -
            -->
            <get_ware_definition result="$products" tags="[tag.container, tag.economy]" />
            <do_for_each name="$resource" in="$products">
              <do_if value="@$Enhanced_Resources.{$resource} == null">
                <set_value name="$Enhanced_Resources.{$resource}" exact="table[$demand=0]" />
              </do_if>
              <set_value name="$sum" operation="add" exact="$Enhanced_Resources.{$resource}.$demand" />
            </do_for_each>
            <do_for_each name="$resource" in="$products">
              <set_value name="$Enhanced_Resources.{$resource}.$efficiencyRatio" exact="$Enhanced_Resources.{$resource}.$demand / $sum" />
            </do_for_each>
          </actions>
        </library>
        <!-- end Process_Station -->
        <!-- end Process_Objects -->

        <library name="Run_Scoring_and_State_Check">
          <actions>
            <do_if value="$Enhanced_runInit">
              <!-- process everything on first run -->
              <include_actions ref="Process_Objects" />
              <set_value name="$Enhanced_runInit" exact="false" />
            </do_if>
            <!-- raw_scores = self.Calculate_Raw_Scores() -->
            <include_actions ref="Calculate_Raw_Scores" />
            <!-- emergencies = self.Check_Emergencies(raw_scores) -->
            <include_actions ref="Check_Emergencies" />
            <!-- self.Check_State_Change(raw_scores) -->
            <include_actions ref="Check_State_Change" />
            <!-- self.weighted_scores = self.Apply_Weights(raw_scores, emergencies) -->
            <include_actions ref="Apply_Weights" />
            <include_actions ref="Set_Build_Order_Priority" />
          </actions>
        </library>
        <library name="Calculate_Raw_Scores">
          <!-- def Calculate_Raw_Scores(self):
            # Calculate total defense needed across all sectors
            total_desired_defense_threatscore = sum(self.Calculate_Sector_Desired_Threatscore(sector) for sector in self.sectors)
            
            economy_score = self.Calculate_Raw_Economy_Score()
            military_score = self.Calculate_Raw_Military_Score(total_desired_defense_threatscore)
            industry_score = self.Calculate_Raw_Industry_Score()
            return (economy_score, military_score, industry_score)
          -->
          <actions>
            <include_actions ref="Update_Objects" />
            <include_actions ref="Calculate_Raw_Economy_Score" />
            <include_actions ref="Calculate_Raw_Military_Score" />
            <include_actions ref="Calculate_Raw_Industry_Score" />
          </actions>
        </library>
        <library name="Update_Objects">
          <actions>
            <!-- sectors -->
            <find_sector name="$Sectors" trueowner="$Faction" multiple="true" />
            <do_for_each name="$sector" in="$Sectors">
              <include_actions ref="Update_Sector" />
            </do_for_each>
            <!-- stations -->
            <find_station_by_true_owner name="$stations" faction="$Faction" space="player.galaxy" multiple="true">
              <match state="componentstate.wreck" negate="true" />
            </find_station_by_true_owner>
            <do_for_each name="$station" in="$stations">
              <include_actions ref="Update_Station" />
            </do_for_each>
          </actions>
        </library>
        <library name="Update_Sector">
          <!-- applicable variables
          $Enhanced_Sectors = table[
            {$sector} = table[
              * $Values = table[
                * $economic = int (dynamic)
                $resource = int (static)
                * $stategic = int (dynamic)
              ]
              $NumProductionModules = table[
                {$moduletype} = int (static)
              ]
              $NumBuildModules = table[
                {$moduletype} = int (static)
              ]
              * $desiredThreatscore = int (dynamic)
            ]
          ]

          def Calculate_Sector_Desired_Threatscore(self, sector):
            # Calculates strategic importance of a sector for military scoring
            resource_value = self.Get_Resource_Value(sector.resources)
            strategic_value = self.Get_Strategic_Value(sector)
            economic_value = sum(station.price * 2 if station.iswharf or station.isshipyard else station.price for station in sector.stations)
            
            # Pirate activity affects both economy and military scores
            pirate_activity = sector.pirate_activity  # Number of ships destroyed by pirates / total number of non-military ships assigned to sector
            self.pirate_activity = (self.pirate_activity + pirate_activity) / 2 if self.pirate_activity > 0 else pirate_activity
            
            total_value = resource_value + strategic_value + economic_value + pirate_activity
            return total_value / self.Enhanced_Values
          -->
          <actions>
            <debug_text text="'update sector value: '+$sector.knownname" chance="$DebugChance" />
            <!-- strategic_value = self.Get_Strategic_Value(sector) -->
            <include_actions ref="Get_Strategic_Value" />

            <!-- enhanced todo: pirate activity metric -->
            <!-- # Pirate activity affects both economy and military scores
                  pirate_activity = sector.pirate_activity # Number of ships destroyed by pirates / total number of non-military ships assigned to sector
                  self.pirate_activity = (self.pirate_activity + pirate_activity) / 2 if self.pirate_activity > 0 else pirate_activity -->
            <set_value name="$Enhanced_Sectors.{$sector}.$desiredThreatscore" exact="
              $Enhanced_Sectors.{$sector}.$Values.$economic / $Enhanced_Values.$sectorValuePerThreatscore + 
              $Enhanced_Sectors.{$sector}.$Values.$strategic + 
              $Enhanced_Sectors.{$sector}.$Values.$resource" />
          </actions>
        </library>
        <library name="Get_Strategic_Value"> <!-- enhanced todo: move this to process sector? or split into border -->
          <!-- def Get_Strategic_Value(self, sector):
                  # Calculates strategic value based on sector type and infrastructure
                  value = self.sector_strategicValue['core'] if not sector.isborder else self.sector_strategicValue['border']
                  if sector.hasWharf or sector.hasShipyard:
                      value += self.sector_strategicValue['primary']
                  if sector.numGates > 0:
                      value += self.sector_strategicValue['gates'][min(sector.numGates - 1, 3)]
                  return value 
              -->
          <actions>
            <!-- enhanced todo: move to process sector -->
            <find_gate name="$gates" space="$sector" multiple="true" />
            <set_value name="$value" exact="$Enhanced_SectorWeights.$Gates.{[$gates.count,4].min}" />
            <set_value name="$Enhanced_Sectors.{$sector}.$Values.$strategic" operation="add" exact="$value" />

            <!-- enhanced todo: move to border handler? -->
            <do_if value="$sector.haslocationtag.border">
              <set_value name="$value" exact="$Enhanced_SectorWeights.$border" />
            </do_if>
            <do_else>
              <set_value name="$value" exact="$Enhanced_SectorWeights.$core" />
            </do_else>
            <set_value name="$Enhanced_Sectors.{$sector}.$Values.$strategic" operation="add" exact="$value" />

            <!-- enhanced todo: static move to process station
              if canbuildships then if not primesector make prime sector and increase desired threatscore -->
            <do_if value="@$Enhanced_PrimeSectors.indexof.{$station.sector}">
              <set_value name="$value" exact="$Enhanced_SectorWeights.$prime" />
            </do_if>
            <do_else>
              <find_object name="$station" space="$sector" trueowner="$Faction" class="class.station" canbuildships="true" />
              <do_if value="$station != null">
                <set_value name="$value" operation="add" exact="$Enhanced_SectorWeights.$prime" />
                <add_to_group groupname="$Enhanced_PrimeSectors" object="$sector" />
              </do_if>
            </do_else>

            <!-- enhanced todo: move to colony handler
              when colonized increase sector desired threatscore -->
            <do_if value="@$ColonySectors.indexof.{$sector}">
              <set_value name="$value" operation="add" exact="$Enhanced_SectorWeights.$colony" />
            </do_if>
            <set_value name="$Enhanced_Sectors.{$sector}.$Values.$strategic" operation="add" exact="$value" />
            <debug_text text="'Get_Strategic_Value: '+$value" chance="$DebugChance" />
          </actions>
        </library>
        <!-- end Update_Sector -->
        <library name="Update_Station">
          <!-- applicable variables
            $Enhanced_Stations = table[
              {$station} = table[
                $isPlanetaryTradestation = bool (static)
                $Demands = table[
                  {$resource} = int (per hour) (static)
                ]
                $Products = table[
                  {$product} = int (per hour) (static)
                ]
                $Secondary = table[
                  {$resource} = int (per hour) (static)
                ]
                * $On_hand = table[
                  {$resource} = int (resource stored in station) (dynamic)
                * $workforceBonus = float (dynamic)
              ] 
            ]
            $Enhanced_Resources = table[
              {$resource} = table[
                $available = largeint (faction-wide availability)
                $production = int (faction-wide productionmodule products)
                * $on_hand = int (faction-wide resources stored in stations)
                $demand = int (faction-wide productionmodule demand, not secondary)
                $secondaryDemand = int (faction-wide productionmodule secondary demand)
                $saturation = float ($on_hand / $demand)
                $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
                $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
              ]
            ]
          -->
          <actions>
            <!-- get on-hand stockpile -->
            <set_value name="$StationData" exact="$Enhanced_Stations.{$station}" />
            <do_for_each name="$resource" in="$station.cargo">
              <set_value name="$amount" exact="$station.cargo.{$resource}.count" />
              <set_value name="$Enhanced_Resources.{$resource}.$onhand" operation="add" exact="$amount" />
              <set_value name="$StationData.$On_hand.{$resource}" exact="$amount" />
            </do_for_each>
            <!-- get stockpile -->
            <set_value name="$StationData.$workforceBonus" exact="$station.workforce.bonus" />
          </actions>
        </library>
        <!-- end Update_Objects -->

        <library name="Calculate_Raw_Economy_Score">
          <!-- notes:
            calculate resource scores:
              includes saturation and transport/mining efficiency
              if on_hand > one hour of demand - production efficiency then 1 else between 0 and 1
            -->
          <actions>
            <include_actions ref="Calculate_Resource_Score" /> <!-- returns $resourceScore-->

            <!-- enhanced todo: economy score
            how many ship builds started and cost (modifies demand)
            how many build slots are inactive vs waitlist = not enough resources (not enough production)
            how many station builds started and expected costs
            how many station builds in waitlist = not enough resources -->

            <set_value name="$Enhanced_Scores.$rawEconomy" exact="$resourceScore" />
          </actions>
        </library>
        <library name="Calculate_Resource_Score">
          <actions>
            <!-- notes: 
                calculate current saturation
                average of all saturation scores
            -->
            <!-- relevant variables
            $Enhanced_Resources = table[
              {$resource} = table[
                $available = largeint (faction-wide availability)
                * $production = int (faction-wide productionmodule products)
                * $on_hand = int (faction-wide resources stored in stations)
                * $demand = int (faction-wide productionmodule demand, not secondary)
                $secondaryDemand = int (faction-wide productionmodule secondary demand)
                * $saturation = float ($on_hand / $demand)
                $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
                * $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
              ]
            ]
            -->
            <!-- calculate current saturation -->
            <get_ware_definition result="$minables" tags="[tag.minable]" />
            <do_for_each name="$resource" in="$Enhanced_Resources">
              <do_if value="not $minables.indexof.{$resource}">
                <!-- products saturation -->
                <set_value name="$Enhanced_Resources.{$resource}.$saturation"
                  exact="[$Enhanced_Resources.{$resource}.$on_hand / 
                    [$Enhanced_Resources.{$resource}.$demand - ($Enhanced_Resources.{$resource}.$efficiency * $Enhanced_Resources.{$resource}.$production), 1].max
                    , 1].min" />
              </do_if>
              <do_else>
                <!-- minables saturation  -->
                <set_value name="$Enhanced_Resources.{$resource}.$saturation"
                  exact="[$Enhanced_Resources.{$resource}.$on_hand / 
                    [$Enhanced_Resources.{$resource}.$demand - ($Enhanced_Resources.{$resource}.$efficiency * $Enhanced_Values.$extraction_rate), 1].max
                    , 1].min" />
              </do_else>
              <set_value name="$sum" operation="add" exact="$Enhanced_Resources.{$resource}.$saturation" />
            </do_for_each>
            <!-- average of all saturation -->
            <set_value name="$resourceScore" exact="$sum / $Enhanced_Resources.count" />
          </actions>
        </library>
        <!-- end Calculate_Raw_Economy_Score -->
        <library name="Calculate_Raw_Military_Score">
          <actions>
            <!-- total military threatscore / total desired threatscore -->
            <do_for_each name="$sector" in="$Enhanced_Sectors">
              <set_value name="$totalThreatScore" operation="add" exact="$Enhanced_Sectors.{$sector}.$threatscore" />
              <set_value name="$desiredThreatScore" operation="add" exact="$Enhanced_Sectors.{$sector}.$desiredThreatscore" />
            </do_for_each>
            <set_value name="$Enhanced_Scores.$rawMilitary" exact="$totalThreatScore / $desiredThreatScore" />
          </actions>
        </library>
        <!-- end Calculate_Raw_Military_Score -->
        <library name="Calculate_Raw_Industry_Score">
          <!--
              def Calculate_Raw_Industry_Score(self):
                  # Adjusts for ship and station construction capabilities
                  # fix thix
                  ship_scores = [self.Calculate_Ship_Building_Score(ship_type) for ship_type in self.shipyards]
                  station_score = self.Calculate_Station_Building_Score()
                  return (sum(ship_scores) / len(ship_scores) if ship_scores else 0) * station_score if station_score else 0
              -->
          <actions>
            <!-- enhanced todo: sent to build ship
              build ship on planet, needs time to construct ship from ware, and spawn point between planet and planetary station spawn point
              if station build in waitlest and resources available and no cv available, then request another cv
            -->
            <include_actions ref="Calculate_Ship_Building_Score" />
            <include_actions ref="Calculate_Station_Building_Score" />
            <set_value name="$Enhanced_Scores.$rawIndustry" exact="[$shipBuildingScore, $stationBuildScore].average" />
          </actions>
        </library>
        <library name="Calculate_Ship_Building_Score">
          <!--
                  -->
          <actions>
            <do_if value="$Enhanced_IndustryBuildShortage.$s gt 0">
              <set_value name="$sShortage" exact="[$Enhanced_IndustryBuildSlots.$s / $Enhanced_IndustryBuildShortage.$s, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$sShortage" exact="1" />
            </do_else>
            <do_if value="$Enhanced_IndustryBuildShortage.$m gt 0">
              <set_value name="$mShortage" exact="[$Enhanced_IndustryBuildSlots.$m / $Enhanced_IndustryBuildShortage.$m, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$mShortage" exact="1" />
            </do_else>
            <do_if value="$Enhanced_IndustryBuildShortage.$l gt 0">
              <set_value name="$lShortage" exact="[$Enhanced_IndustryBuildSlots.$l / $Enhanced_IndustryBuildShortage.$l, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$lShortage" exact="1" />
            </do_else>
            <do_if value="$Enhanced_IndustryBuildShortage.$xl gt 0">
              <set_value name="$xlShortage" exact="[$Enhanced_IndustryBuildSlots.$xl / $Enhanced_IndustryBuildShortage.$xl, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$xlShortage" exact="1" />
            </do_else>
            <do_if value="$Enhanced_IndustryBuildShortage.$xxl gt 0">
              <set_value name="$xxlShortage" exact="[$Enhanced_IndustryBuildSlots.$xxl / $Enhanced_IndustryBuildShortage.$xxl, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$xxlShortage" exact="1" />
            </do_else>
            <set_value name="$Enhanced_BuildPriority.$Buildmodules" exact="table[
              $wharf = [sShortage, mShortage].min,
              $l = lShortage,
              $xl = xlShortage,
              $xxl = xxlShortage
            ]" />
            <set_value name="$shipBuildingScore" exact="[$sShortage, $mShortage, $lShortage, $xlShortage, $xxlShortage].average" />
          </actions>
        </library>
        <library name="Calculate_Station_Building_Score">
          <!--
                  -->
          <actions>
            <set_value name="$stationBuildScore" exact="[$Enhanced_Ships.$Construction / $Enhanced_IndustryBuildShortage.$station, 1].min" />
            <set_value name="$Enhanced_BuildPriority.$Ships.$Construction" exact="$stationBuildScore" />
            <set_value name="$Enhanced_BuildPriority.$Ships.$Construction" exact="$stationBuildScore" />
          </actions>
        </library>
        <!-- end Calculate_Raw_Industry_Score -->
        <!-- end Calculate_Raw_Scores -->

        <library name="Check_Emergencies">
          <!-- 
          def Check_Emergencies(self, scores):
              # Determines if an emergency state should be declared for each sector
              threshhold = self.score_emergency_threshholds
              economy_score, military_score, industry_score = scores
              return {
                  'economy': economy_score< threshhold['economy'],
                  'military': military_score < threshhold['military'],
                  'industry': industry_score < threshhold['industry']
              }
          -->
        </library>

        <library name="Check_State_Change">
          <!--
          def Check_State_Change(self, scores):
              economy_score, military_score, industry_score = scores
              threshholds = self.state_threshholds

              if self.state == State.EXPANSION:
                  if military_score< threshholds ['mil_defense' ]:
                  self.state= State.DEFENSE
                  elif economy_score < threshholds ['eco_consolidation' ] or industry_score < threshholds ['ind_consolidation' ]:
                  self.state= State.CONSOLIDATE
                  elif self.state== State.CONSOLIDATE:
                  if military_score < threshholds['mil_defense']:
                      self.state = State.DEFENSE
                  elif economy_score > threshholds['eco_expansion'] and industry_score > threshholds['ind_expansion'] and military_score > threshholds['mil_expansion']:
                      self.state = State.EXPANSION

              elif self.state == State.DEFENSE:
                  if economy_score > threshholds['eco_expansion'] and industry_score > threshholds['ind_expansion'] and military_score > threshholds['mil_expansion']:
                      self.state = State.EXPANSION
                  elif military_score > threshholds['mil_consolidation']:
                      self.state = State.CONSOLIDATE

              elif self.state == State.WAR_INVADE:
                  if military_score < threshholds ['mil_defense' ]:
                  self.state= State.WAR_DEFENSE
                  elif economy_score < threshholds ['eco_consolidation' ] or industry_score < threshholds ['ind_consolidation' ]:
                  self.state= State.WAR_CONSOLIDATE
                  elif self.state== State.WAR_DEFENSE:
                  if economy_score < threshholds ['eco_consolidation' ] or industry_score < threshholds['ind_consolidation']:
                      self.state = State.WAR_CONSOLIDATE
                  elif military_score > threshholds['mil_invade']:
                      self.state = State.WAR_INVADE

              elif self.state == State.WAR_CONSOLIDATE:
                  if military_score < threshholds['mil_defense']:
                      self.state = State.WAR_DEFENSE
                  elif military_score > threshholds['mil_invade'] and economy_score > threshholds['eco_consolidation'] and industry_score > threshholds['ind_consolidation']: self.state = State.WAR_INVADE if self.state != self.previous_state: self.notify_state_change(self.previous_state, self.state) self.previous_state = self.state
          -->
        </library>

        <library name="Apply_Weights">
          <!-- 
          def Apply_Weights(self, scores, emergencies):
              weights = self.score_weights
              stateWeights = self.state_weights[self.state]
              emergency_weights = self.score_emergency_weights
              economy_score, military_score, industry_score = scores

              return {
                  'economy': economy_score * (weights['economy'] if not emergencies['economy'] else emergency_weights['economy']) * stateWeights['economy'],
                  'military': military_score * (weights['military'] if not emergencies['military'] else emergency_weights['military'])  * stateWeights['military'],
                  'industry': industry_score * (weights['industry'] if not emergencies['industry'] else emergency_weights['industry'])  * stateWeights['industry']
              }
          -->
        </library>

        <library name="Set_Build_Order_Priority">
          <!-- 
          def Set_Build_Order_Priority(self):
              # Returns a list of priorities based on current state
              if self.state == State.EXPANSION:
                  return ['Construction Ship', 'Wharf', 'Miner (Solid)', 'Miner (Fluid)']
              elif self.state == State.CONSOLIDATE:
                  return ['Factory', 'Trade Station', 'Transport (Container)']
              elif self.state == State.DEFENSE:
                  return ['Defense Station', 'Defensive Ship', 'Scout']
              elif self.state == State.WAR_INVADE:
                  return ['Offensive Ship', 'Scout', 'Defensive Ship']
              elif self.state == State.WAR_DEFENSE:
                  return ['Defensive Ship', 'Defense Station', 'Scout']
              elif self.state == State.WAR_CONSOLIDATE:
                  return ['Offensive Ship', 'Defensive Ship', 'Factory']
          -->
        </library>
        <!-- end Run_Scoring_and_State_Check -->

        <library name="Normalize" purpose="run_actions">
          <!--
    # normalizes data to be between 0 and 1
    @staticmethod
    def normalize(value, min_value (optional, default=0), max_value):
        return (value - min_value) / (max_value - min_value) if max_value > min_value else 1
    -->
          <params>
            <param name="value" />
            <param name="max_value" />
            <param name="min_value" default="0" />
          </params>
          <actions>
            <do_if value="$max_value gt $min_value">
              <return value="($value - $min_value) / ($max_value - $min_value)" />
            </do_if>
            <do_else>
              <return value="1" />
            </do_else>
          </actions>
        </library>
      </cues>
    </cue>
  </cues>
</mdscript>