<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionLogic_Enhanced"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../xsd/md.xsd">
  <cues>
    <!-- notes:
    == Flow ==
    5 minutes faction is analyzed
    30 seconds factions waiting job ships are analyzed and sent to stations


    == Manager Variables ==
      $Enhanced_State = table[
        $current = 'CONSOLIDATE'
        $last = ''
        $atWar = false
      ]
      $Enhanced_Params.$StateWeights = table[
        $EXPANSION = table[    $economy = 0,    $military = 0,    $industry = 0.2  ],
        $CONSOLIDATE = table[  $economy = 0.2,  $military = 0,    $industry = 0    ],
        $DEFENSE = table[      $economy = 0,    $military = 0.2,  $industry = 0    ],
        $WAR = table[          $economy = 0,    $military = 0.2,  $industry = 0    ] (modifies other three states when at war)
      ]

      enhanced todo: global.$EnhancedLogic.$NeutralZones = group[sector] (ownerless sectors adjacent to owned sectors)
      
      $Enhanced_State = string ('EXPANSION', 'CONSOLIDATE', 'DEFENSE')
      $Enhanced_PreviousState = string ('EXPANSION', 'CONSOLIDATE', 'DEFENSE')
      $Enhanced_Scores = table[
        $economy = float
        $military = float
        $industry = float
      ]

      (dynamic)
      $Enhanced_BuildPriority = table[
        $Buildmodules = table[]
        $Productionmodules = table[]
        $Ships = table[]
      ]

      (set by process station; static)
      $Enhanced_Industry.$BuildSlots = table[
        $s = int
        $m = int
        $l = int
        $xl = int
        $xxl = int
        $cv = int
        $planet = int
      ]

      (when build queue has resources available to initiate a waiting build but not build slots available; dynamic)
      $Enhanced_Industry.$BuildShortage = table[
        $s = int
        $m = int
        $l = int
        $xl = int
        $xxl = int
        $station = int
      ]

      $Enhanced_PrimeSectors = group[sector] (stations that have ship buildmodules)
      $Enhanced_ColonySectors = group[sector] (sectors with colonies)
      
      $Enhanced_Resources = table[
        {$resource} = table[
          $available = largeint (minables: faction-wide availability)
          $production = int (products: faction-wide production)
          $on_hand = int (faction-wide resources stored in stations)
          $demand = int (faction-wide productionmodule demand, not secondary)
          $secondaryDemand = int (faction-wide productionmodule secondary demand)
          $saturation = float ($on_hand / $demand)
          $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
          $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
          $shortage = int
        ]
      ]

      $Enhanced_Industry = table[
        $BuildSlots = table[{$size}]
        $ResourceShortage = table[{$size}]
        $BuildShortage = table[{$size}]
      ]

      $Enhanced_Sectors = table[
        {$sector} = table[
          $Values = table[
            $economic = int (dynamic)
            $resource = int (static)
            $strategic = int (dynamic)
          ]
          $Resources = table[
            $sunlight = float (static)
            {$resource} = int (static)
          ]
          $NumProductionModules = table[
            {$moduletype} = int (static)
          ]
          $NumBuildModules = table[
            {$moduletype} = int (static)
          ]
          $threatscore = int (dynamic)
          $desiredThreatscore = int (dynamic)
          enhanced todo: $Enhanced_PirateActivity = float (0 through 1) (when ships are destroyed by pirate faction within the sector; dynamic)
        ]
      ]
      
      $Enhanced_Ships = table[
        $Mining = table[
          {$ware} = int (static)
        ],
        $Transporting = table[
          {$ware} = int (static)
        ]
        $Construction = int (number of construction vessels; static)
        $Waitlists
      ]

      $Enhanced_Stations = table[
        $Number = table[
          $trade = int
          $pirate = int
          $defence = int
          $factory = int
          $shipyard = int
          $wharf = int
          $equipment = int
        ]
        $Stations = table[
          {$station} = table[
            $type = string (pirate, defence, trade, factory, shipyard, wharf)
            $Demands = table[
              {$resource} = int (per hour) (static)
            ]
            $Products = table[
              {$product} = int (per hour) (static)
            ]
            $Secondary = table[
              {$resource} = int (per hour) (static)
            ]
            $On_hand = table[
              {$resource} = int (resource stored in station) (dynamic)
            $workforceBonus = float (dynamic)
          ]
        ]
        $Constructing = table[]
      ]
      -->
    <cue name="Init">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start" />
      </conditions>
      <delay exact="1ms" />
      <actions>
        <set_value name="$DebugChance" exact="100" />
        <create_group groupname="$NeutralZones" />
        <create_group groupname="$AllShips" />
        <!-- populated when ships are built -->
        <create_group groupname="$AllBuildstorages" />
        <!-- populated by aiscript build.stationstorage.xml -->
        <create_group groupname="$AllProductions" />
        <!-- populated when station is processed -->
        <create_group groupname="$AllBuildmodules" />
        <!-- populated when station is processed -->
        <set_value name="global.$EnhancedLogic" exact="table[
          $NeutralZones = $NeutralZones,
          $AllShips = $AllShips,
          $AllBuildstorages = $AllBuildstorages,
          $AllProductions = $AllProductions,
          $AllBuildmodules = $AllBuildmodules,
          $BuildmoduleNumdocks = table[],
          $ProductionDemandOutput = null,
          $GalaxyResourceAverages = table[
            ware.ore = 0L,
            ware.hydrogen = 0L,
            ware.ice = 0L,
            ware.silicon = 0L,
            ware.helium = 0L,
            ware.nividium = 0L,
            ware.methane = 0L
          ]
        ]" />
        <!-- get galaxy resources -->
        <find_sector name="$sectors" space="player.galaxy" multiple="true" />
        <do_for_each name="$sector" in="$sectors">
          <do_for_each name="$resource" in="$sector.averagemaxyield">
            <set_value name="global.$EnhancedLogic.$GalaxyResourceAverages.{$resource}" operation="add" exact="$sector.averagemaxyield.{$resource}" />
          </do_for_each>
        </do_for_each>
        <do_for_each name="$resource" in="global.$EnhancedLogic.$GalaxyResourceAverages">
          <set_value name="global.$EnhancedLogic.$GalaxyResourceAverages.{$resource}" exact="global.$EnhancedLogic.$GalaxyResourceAverages.{$resource} / ($sectors.count)L" />
        </do_for_each>
        <remove_value name="$sectors" />
        <!-- get build module docks -->
        <get_module_definition macro="$buildmoduleMacros" tags="tag.build" multiple="true" />
        <do_for_each name="$macro" in="$buildmoduleMacros">
          <do_if value="not @global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}">
            <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}" exact="table[]" />
          </do_if>
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$s" exact="@$macro.numdocks.{tag.dock_s}" />
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$m" exact="@$macro.numdocks.{tag.dock_m}" />
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$l" exact="@$macro.numdocks.{tag.dock_l}" />
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$xl" exact="@$macro.numdocks.{tag.dock_xl}" />
          <set_value name="global.$EnhancedLogic.$BuildmoduleNumdocks.{$macro}.$xxl" exact="@$macro.numdocks.{tag.dock_xxl}" />
        </do_for_each>
        <!--  get galaxy production module demand per hour and base products per hour
              results saved to global.$EnhancedLogic.$ProductionDemandOutput -->
        <raise_lua_event name="'oneSector.assessProductionDemandOutput'" />
      </actions>
      <cues>
        <!-- Set Static Values -->
        <library name="Init_Process_Objects">
          <actions>
            <!-- sectors -->
            <find_sector name="$Sectors" trueowner="$Faction" multiple="true" />
            <do_for_each name="$sector" in="$Sectors">
              <run_actions ref="Process_Sector">
                <param name="Faction" value="$Faction" />
                <param name="sector" value="$sector" />
              </run_actions>
            </do_for_each>

            <!-- stations -->
            <find_station_by_true_owner name="$stations" faction="$Faction" space="player.galaxy" multiple="true" />
            <do_for_each name="$station" in="$stations">
              <run_actions ref="Process_Station">
                <param name="Faction" value="$Faction" />
                <param name="station" value="$station" />
              </run_actions>
            </do_for_each>

            <!-- ships -->
            <do_for_each name="$purpose" in="[purpose.trade, purpose.mine]">
              <find_ship_by_true_owner name="$Ships" faction="$Faction" space="player.galaxy" multiple="true" primarypurpose="$purpose" />
              <do_for_each name="$ship" in="$Ships">
                <run_actions ref="Process_Ship">
                  <param name="Faction" value="$Faction" />
                  <param name="ship" value="$ship" />
                </run_actions>
              </do_for_each>
            </do_for_each>
          </actions>
        </library>

        <!-- begin Process_Sector -->
        <library name="Process_Sector" purpose="run_actions">          <!-- requires: $Faction and $sector-->
          <params>
            <param name="Faction" />
            <param name="sector" />
          </params>
          <actions>
            <set_value name="$Manager" exact="global.$FactionManagers.{$Faction}" />
            <set_value name="$Enhanced_Sectors" exact="$Manager.$Enhanced_Sectors" />
            <set_value name="$Enhanced_Resources" exact="$Manager.$Enhanced_Resources" />
            <set_value name="$Enhanced_PrimeSectors" exact="$Manager.$Enhanced_PrimeSectors" />
            <do_if value="not @$Enhanced_Sectors.{$sector}">
              <set_value name="$Enhanced_Sectors.{$sector}" exact="table[
                  $Values = table[],
                  $Resources = table[],
                  $NumProductionModules = table[],
                  $NumBuildModules = table[]
                ]" />
            </do_if>
            <set_value name="$Enhanced_Params" exact="$Manager.$Enhanced_Params" />
            <set_value name="$SectorWeights" exact="$Enhanced_Params.$SectorWeights" />
            <set_value name="$sectorValuePerThreatscore" exact="$Enhanced_Params.$Misc.$sectorValuePerThreatscore" />
            <set_value name="$extraction_rate" exact="$Enhanced_Params.$Misc.$extraction_rate" />
            <set_value name="$SectorData" exact="$Enhanced_Sectors.{$sector}" />
            <set_value name="$SectorData.$desiredThreatscore" exact="0" />

            <find_gate name="$gates" space="$sector" multiple="true" />
            <set_value name="$value" exact="$Enhanced_Params.$SectorWeights.$Gates.{[$gates.count,4].min}" />
            <set_value name="$SectorData.$Values.$strategic" operation="add" exact="$value" />

            <include_actions ref="Process_Resource_Value" />
            <include_actions ref="Process_Mining_EfficiencyRatio" />
          </actions>
        </library>
        <library name="Process_Resource_Value">
          <!-- applicable variables
          $Enhanced_Sectors = table[
            {$sector} = table[
              * $Values = table[
                $economic = int (dynamic)
                * $resource = int (static)
                $strategic = int (dynamic)
              ]
              * $Resources = table[
                $sunlight = float (static)
                {$resource} = int (static)
              ]
              $NumProductionModules = table[
                {$moduletype} = int (static)
              ]
              $NumBuildModules = table[
                {$moduletype} = int (static)
              ]
              $desiredThreatscore = int (dynamic)
            ]
          ]
          $Enhanced_Resources = table[
            {$resource} = table[
              $available = largeint (faction-wide availability)
              $production = int (faction-wide productionmodule products)
              $on_hand = int (faction-wide resources stored in stations)
              $demand = int (faction-wide productionmodule demand, not secondary)
              $secondaryDemand = int (faction-wide productionmodule secondary demand)
              $saturation = float ($on_hand / $demand)
              $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
              $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
            ]
          ]

          def Get_Resource_Value(self, resources):
            # Calculates resource value based on available resources
            return sum(resource.amount * resource.demand for resource in resources) if resources else 0 
          -->
          <actions>
            <debug_text text="'sunlight: '+$sector.sunlight" chance="$DebugChance" />
            <set_value name="$value" exact="$sector.sunlight" />
            <set_value name="$SectorData.$Resources.$sunlight" exact="$value" />
            <debug_text text="'resources: '+$sector.averagemaxyield" chance="$DebugChance" />
            <do_for_each name="$resource" in="$sector.averagemaxyield">
              <do_if value="@$Enhanced_Resources.{$resource} == null">
                <set_value name="$Enhanced_Resources.{$resource}" exact="table[]" />
              </do_if>
              <debug_text text="'$score exact=$sector.averagemaxyield.{$resource} / global.$EnhancedLogic.$GalaxyResourceAverages.{$resource} : '+ $score + ' = '+$sector.averagemaxyield.{$resource} / global.$EnhancedLogic.$GalaxyResourceAverages.{$resource}" chance="$DebugChance" />
              <set_value name="$average" exact="$sector.averagemaxyield.{$resource}" />
              <!-- set resource amount -->
              <set_value name="$SectorData.$Resources.{$resource}" exact="$average" />
              <set_value name="$Enhanced_Resources.{$resource}.$Available" operation="add" exact="$average" />
              <!-- add resource value -->
              <set_value name="$resourceValue" exact="$average / global.$EnhancedLogic.$GalaxyResourceAverages.{$resource}" />
              <set_value name="$value" operation="add" exact="$resourceValue" />
              <debug_text text="$resource.knownname+' resourceValue: '+$resourceValue+' | '+$average" chance="$DebugChance" />
            </do_for_each>
            <set_value name="$SectorData.$Values.$resource" exact="$value" />
            <debug_text text="'Get_Resource_Value (is it a good threatscore?): '+$value" chance="$DebugChance" />
          </actions>
        </library>
        <library name="Process_Mining_EfficiencyRatio">
          <actions>
            <!-- update empire minable resource efficiency ratios (static)
              solid and gas are compared separately
            -->
            <get_ware_definition result="$gas" group="'gasses'" />
            <get_ware_definition result="$solid" tags="[tag.solid, tag.minable]" />
            <do_for_each name="$list" in="[$gas, $solid]">
              <do_for_each name="$resource" in="$list">
                <do_if value="@$Enhanced_Resources.{$resource} == null">
                  <set_value name="$Enhanced_Resources.{$resource}" exact="table[$available=0]" />
                </do_if>
                <set_value name="$resourceSum" operation="add" exact="$Enhanced_Resources.{$resource}.$available" />
              </do_for_each>
              <do_for_each name="$resource" in="$list">
                <!-- enhanced todo: factor in distance? -->
                <set_value name="$Enhanced_Resources.{$resource}.$efficiencyRatio" exact="$Enhanced_Resources.{$resource}.$available / $resourceSum" />
              </do_for_each>
            </do_for_each>
          </actions>
        </library>
        <!-- end Process_Sector -->

        <!-- begin Process_Ship-->
        <library name="Process_Ship" purpose="run_actions">          <!-- requires: $Faction and $ship | optional: $remove -->
          <params>
            <param name="Faction" />
            <param name="ship" />
            <param name="remove" default="false" />
          </params>
          <!-- relevant variables
          $Enhanced_Ships = table[
            $Mining = table[
              {$ware} = int
            ],
            $Transporting = table[
              {$ware} = int
            ]
            $Construction = int
          ] -->
          <actions>
            <do_if value="$remove">
              <set_value name="$removal" exact="-1" />
            </do_if>
            <do_else>
              <set_value name="$removal" exact="1" />
            </do_else>

            <set_value name="$Manager" exact="global.$FactionManagers.{$Faction}" />
            <set_value name="$Enhanced_Ships" exact="$Manager.$Enhanced_Ships" />
            <set_value name="$Enhanced_Sectors" exact="$Manager.$Enhanced_Sectors" />

            <!-- military -->
            <do_if value="$ship.primarypurpose == purpose.fight">
              <set_value name="$Enhanced_Sectors.{$ship.jobmainsector}.$threatscore" operation="add" exact="$ship.threatscore * $removal" />
            </do_if>

            <!-- economy -->
            <do_elseif value="@[purpose.trade, purpose.mine, purpose.salvage].indexof.{$ship.primarypurpose}">
              <set_value name="$class" exact="$ship.class" />
              <do_if value="$class == class.size_m">
                <set_value name="$value" exact="1" />
              </do_if>
              <do_elseif value="$class == class.size_l">
                <set_value name="$value" exact="3" />
              </do_elseif>
              <do_elseif value="$class == class.size_xl">
                <set_value name="$value" exact="5" />
              </do_elseif>

              <do_if value="$ship.primarypurpose == purpose.trade">
                <do_for_each name="$ware" in="$ship.warebasket">
                  <set_value name="$Enhanced_Ships.$Transporting.{$ware}" operation="add" exact="$value * $removal" />
                </do_for_each>
              </do_if>

              <do_elseif value="@[purpose.mine, purpose.salvage].indexof.{$ship.primarypurpose}">
                <do_for_each name="$ware" in="$ship.warebasket">
                  <set_value name="$Enhanced_Ships.$Mining.{$ware}" operation="add" exact="$value * $removal" />
                </do_for_each>
              </do_elseif>
              <include_actions ref="Process_Efficiencies" />
            </do_elseif>

            <!-- industry -->
            <do_elseif value="$ship.primarypurpose == purpose.build">
              <set_value name="$Enhanced_Ships.$Construction" operation="add" exact="1 * $removal" />
            </do_elseif>
          </actions>
        </library>
        <library name="Process_Efficiencies">
          <!-- relevant variables
            $Enhanced_Resources = table[
              {$resource} = table[
                $available = largeint (faction-wide availability)
                $production = int (faction-wide productionmodule products)
                $on_hand = int (faction-wide resources stored in stations)
                $demand = int (faction-wide productionmodule demand, not secondary)
                $secondaryDemand = int (faction-wide productionmodule secondary demand)
                $saturation = float ($on_hand / $demand)
                * $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
                * $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
              ]
            ]

            $Enhanced_Ships = table[
              $Mining = table[
                {$resource} = int (number of ships that mine this resource) (static)
              ],
              $Transporting = table[
                {$resource} = int (number of ships that can carry this resource) (static)
              ]
            ]
          -->
          <actions>
            <set_value name="$Enhanced_Resources" exact="$Manager.$Enhanced_Resources" />
            <set_value name="$Enhanced_Ships" exact="$Manager.$Enhanced_Ships" />
            <set_value name="$Enhanced_BuildPriority" exact="$Manager.$Enhanced_BuildPriority" />
            <!-- mining efficiency -->
            <do_if value="$ship.primarypurpose == purpose.mine">
              <do_if value="$ship.cargo.capacity.solid gt 0">
                <get_ware_definition result="$solid" tags="[tag.solid, tag.minable]" />
                <do_for_each name="$resource" in="$solid">
                  <set_value name="$Enhanced_Resources.{$resource}.$efficiency" exact="$Enhanced_Ships.$Mining.{$resource} * $Enhanced_Resources.{$resource}.$efficiencyRatio" />
                  <set_value name="$maxDemandVolume" exact="[@$maxDemandVolume, $Enhanced_Resources.{$resource}.$demand * $resource.volume].max" />
                </do_for_each>
                <do_for_each name="$resource" in="$solid">
                  <set_value name="$score" exact="[1, $Enhanced_Resources.{$resource}.$efficiency].min * $Enhanced_Resources.{$resource}.$demand / $maxDemandVolume" />
                  <set_value name="$Enhanced_BuildPriority.$Mine.$Solid.{$resource}" exact="$score" />
                  <set_value name="$resourceSum" operation="add" exact="$score" />
                </do_for_each>
                <set_value name="$Enhanced_BuildPriority.$Mine.$Solid.$score" exact="$resourceSum / $solid.count" />
              </do_if>
              <do_else>
                <get_ware_definition result="$gas" group="'gasses'" />
                <do_for_each name="$resource" in="$gas">
                  <set_value name="$Enhanced_Resources.{$resource}.$efficiency" exact="$Enhanced_Ships.$Mining.{$resource} * $Enhanced_Resources.{$resource}.$efficiencyRatio" />
                  <set_value name="$maxDemandVolume" exact="[@$maxDemandVolume, $Enhanced_Resources.{$resource}.$demand * $resource.volume].max" />
                </do_for_each>
                <do_for_each name="$resource" in="$gas">
                  <set_value name="$score" exact="[1, $Enhanced_Resources.{$resource}.$efficiency].min * $Enhanced_Resources.{$resource}.$demand / $maxDemandVolume" />
                  <set_value name="$Enhanced_BuildPriority.$Mine.$Gas.{$resource}" exact="$score" />
                  <set_value name="$resourceSum" operation="add" exact="$score" />
                </do_for_each>
                <set_value name="$Enhanced_BuildPriority.$Mine.$Gas.$score" exact="$resourceSum / $gas.count" />
              </do_else>
              <set_value name="$Enhanced_BuildPriority.$Mine.$score" exact="[$Enhanced_BuildPriority.$Mine.$Gas.$score, $Enhanced_BuildPriority.$Mine.$Solid.$score].average" />
            </do_if>
            <!-- transportation efficiency -->
            <do_elseif value="$ship.primarypurpose == purpose.trade">
              <do_for_each name="$resource" in="$Enhanced_Ships.$Transporting">
                <set_value name="$Enhanced_Resources.{$resource}.$efficiency" exact="$Enhanced_Ships.$Transporting.{$resource} * $Enhanced_Resources.{$resource}.$efficiencyRatio" />
                <set_value name="$maxDemandVolume" exact="[@$maxDemandVolume, $Enhanced_Resources.{$resource}.$demand * $resource.volume].max" />
              </do_for_each>
              <do_for_each name="$resource" in="$Enhanced_Ships.$Transporting">
                <set_value name="$score" exact="[1, $Enhanced_Resources.{$resource}.$efficiency].min * $Enhanced_Resources.{$resource}.$demand / $maxDemandVolume" />
                <set_value name="$Enhanced_BuildPriority.$Trade.{$resource}" exact="$score" />
                <set_value name="$resourceSum" operation="add" exact="$score" />
              </do_for_each>
              <set_value name="$Enhanced_BuildPriority.$Trade.$score" exact="$resourceSum / $Enhanced_Ships.$Transporting.count" />
            </do_elseif>
          </actions>
        </library>
        <!-- end Process_Ship -->

        <!-- begin Process_Station -->
        <library name="Process_Station" purpose="run_actions">          <!-- requires: $Faction and $station | optional: $remove or $module -->
          <params>
            <param name="Faction" />
            <param name="station" />
            <param name="remove" default="false" />
          </params>
          <!-- applicable variables
          $Enhanced_Sectors = table[
            {$sector} = table[
              $Values = table[
                $economic = int (dynamic)
                $resource = int (static)
                $strategic = int (dynamic)
              ]
              * $NumProductionModules = table[
                {$moduletype} = int (static)
              ]
              * $NumBuildModules = table[
                {$moduletype} = int (static)
              ]
              $desiredThreatscore = int (dynamic)
            ]
          ]
          
          Demands and products table:
          global.$EnhancedLogic.$ProductionDemandOutput.{$module.macro} = table[
            $Demands = table[
              {$resource} = int (number per hour)
            ],
            $Products = table[
              {$product = int (number per hour)
            ],
            $Secondary = table[
              {$resource} = int (number per hour)
            ]
          ]
            
          $Enhanced_Stations = table[
            {$station} = table[
              * $isPlanetaryTradestation = bool (static)
              * $Demands = table[
                {$resource} = int (per hour) (static)
              ]
              * $Products = table[
                {$product} = int (per hour) (static)
              ]
              * $Secondary = table[
                {$resource} = int (per hour) (static)
              ]
              $On_hand = table[
                {$resource} = int (resource stored in station) (dynamic)
              $workforceBonus = float (dynamic)
            ] 
          ]
          
          $Enhanced_Resources = table[
            {$resource} = table[
              $available = largeint (faction-wide availability)
              * $production = int (faction-wide productionmodule products)
              $on_hand = int (faction-wide resources stored in stations)
              * $demand = int (faction-wide productionmodule demand, not secondary)
              * $secondaryDemand = int (faction-wide productionmodule secondary demand)
              $saturation = float ($on_hand / $demand)
              $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
              $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
            ]
          ]
          -->
          <actions>
            <!-- enhanced todo: optimize instead of resetting all values each update -->
            <set_value name="$Manager" exact="global.$FactionManagers.{$Faction}" />
            <set_value name="$Slots" exact="$Manager.$Enhanced_Industry.$BuildSlots" />
            <set_value name="$Enhanced_Sectors" exact="$Manager.$Enhanced_Sectors" />
            <set_value name="$sector" exact="$station.sector" />

            <!-- either contesting or claiming sector -->
            <do_if value="not @$Enhanced_Sectors.{$sector}">
              <set_value name="$Enhanced_Sectors.{$sector}" exact="table[
                $Values = table[],
                $Resources = table[],
                $NumProductionModules = table[],
                $NumBuildModules = table[]
              ]" />
              <run_actions ref="Process_Sector">
                <param name="Faction" value="$Faction" />
                <param name="sector" value="$sector" />
              </run_actions>
            </do_if>
            <set_value name="$SectorData" exact="$Enhanced_Sectors.{$sector}" />

            <!-- apply defense station's threatscore to sector -->
            <do_if value="$station.isdefencestation">
              <set_value name="$SectorData.$threatscore" operation="add" exact="$station.threatscore * if $remove then -1 else 1" />
            </do_if>

            <!-- process other stations -->
            <do_else>
              <set_value name="$Enhanced_Stations" exact="$Manager.$Enhanced_Stations" />
              <set_value name="$Enhanced_Resources" exact="$Manager.$Enhanced_Resources" />

              <!-- reset station values -->
              <do_if value="@$Enhanced_Stations.{$station}">
                <remove_from_group group="$Enhanced_BuildStations" object="$station" />
                <set_value name="$StationData" exact="$Enhanced_Stations.{$station}" />

                <set_value name="$SectorData.$Values.$economic" operation="subtract" exact="$StationData.$stationvalue" />
                <do_for_each name="$macro" in="$StationData.$Productions">
                  <set_value name="$SectorData.$NumProductionModules.{$macro}" operation="subtract" exact="$StationData.$Productions.{$macro}.count" />
                </do_for_each>
                <do_if value="$StationData.$Buildmodules.count gt 0">
                  <!-- prime sector check -->
                  <find_object name="$station" space="$sector" trueowner="$Faction" class="class.station" canbuildships="true" />
                  <do_if value="not $station">
                    <set_value name="$SectorData.$Values.$strategic" operation="subtract" exact="$Enhanced_Params.$SectorWeights.$prime" />
                    <remove_from_group group="$Enhanced_PrimeSectors" object="$sector" />
                  </do_if>
                  <do_for_each name="$macro" in="$StationData.$Buildmodules">
                    <set_value name="$SectorData.$NumBuildModules.{$macro}" operation="subtract" exact="$StationData.$Buildmodules.{$macro}.count" />
                    <set_value name="$Slots.$s" operation="subtract" exact="@$macro.numdocks.{tag.dock_s)" />
                    <set_value name="$Slots.$m" operation="subtract" exact="@$macro.numdocks.{tag.dock_m)" />
                    <set_value name="$Slots.$l" operation="subtract" exact="@$macro.numdocks.{tag.dock_l)" />
                    <set_value name="$Slots.$xl" operation="subtract" exact="@$macro.numdocks.{tag.dock_xl)" />
                    <set_value name="$Slots.$xxl" operation="subtract" exact="@$macro.numdocks.{tag.dock_xxl)" />
                  </do_for_each>
                </do_if>
                <do_for_each name="$demand" in="$StationData.$Demands">
                  <set_value name="$Enhanced_Resources.{$demand}.$demand" operation="subtract" exact="$StationData.$Demands.{$demand}" />
                </do_for_each>
                <do_for_each name="$product" in="$StationData.$Products">
                  <set_value name="$Enhanced_Resources.{$product}.$production" operation="subtract" exact="$StationData.$Products.{$product}" />
                </do_for_each>
                <do_for_each name="$secondary" in="$StationData.$Secondary">
                  <set_value name="$Enhanced_Resources.{$secondary}.$secondaryDemand" operation="subtract" exact="$StationData.$Secondary.{$secondary}" />
                </do_for_each>
                <remove_value name="$Enhanced_Stations.{$station}" />
              </do_if>

              <!-- add station values -->
              <do_if value="not $remove">
                <set_value name="$ProdValues" exact="global.$EnhancedLogic.$ProductionDemandOutput" />
                <!-- add station to stations table -->
                <do_if value="@$Enhanced_Stations.{$station} == null">
                  <set_value name="$Enhanced_Stations.{$station}" exact="table[
                    $Buildmodules = table[],
                    $Productions = table[],
                    $Demands = table[],
                    $Products = table[],
                    $Secondary = table[],
                    $On_hand = table[]
                  ]" />
                </do_if>
                <set_value name="$StationData" exact="$Enhanced_Stations.{$station}" />
                <get_object_value object="$station" result="$stationvalue" />
                <set_value name="$SectorData.$Values.$economic" operation="add" exact="$stationvalue" />

                <!-- enhanced todo: move to colony handler?
                when colonized increase sector desired threatscore -->
                <!-- <do_if value="@$ColonySectors.indexof.{$sector}">
                  <set_value name="$value" operation="add" exact="$Enhanced_Params.$SectorWeights.$colony" />
                </do_if>
                <do_if value="@md.OneSector_PlanetaryAid.Init.exists and @md.OneSector_PlanetaryAid.Init.$PlanetaryTradestation.{$station}">
                  <set_value name="$StationData.$isPlanetaryTradestation" exact="true" />
                </do_if> -->

                <!-- production modules -->
                <do_for_each name="$production" in="$station.productions">
                  <do_if value="not @global.$EnhancedLogic.$AllProductions.indexof.{$production} or $remove">
                    <do_if value="$remove">
                      <remove_from_group group="global.$EnhancedLogic.$AllProductions" object="$production" />
                    </do_if>
                    <do_else>
                      <add_to_group groupname="global.$EnhancedLogic.$AllProductions" object="$production" />
                    </do_else>
                    <do_if value="@$SectorData.$NumProductionModules == null">
                      <set_value name="$SectorData.$NumProductionModules" exact="table[]" />
                    </do_if>
                    <set_value name="$macro" exact="$production.macro" />
                    <set_value name="$ModuleData" exact="$ProdValues.{$macro}" />
                    <!-- add module to sector -->
                    <set_value name="$SectorData.$NumProductionModules.{$macro}" operation="add" exact="1" />
                    <!-- add demands and products to station and faction -->
                    <do_for_each name="$demand" in="$ModuleData.$Demands">
                      <set_value name="$StationData.$Demands.{$demand}" operation="add" exact="$ModuleData.$Demands.{$demand}" />
                      <do_if value="@$Enhanced_Resources.{$demand} == null">
                        <set_value name="$Enhanced_Resources.{$demand}" exact="table[]" />
                      </do_if>
                      <set_value name="$Enhanced_Resources.{$demand}.$demand" operation="add" exact="$ModuleData.$Demands.{$demand}" />
                    </do_for_each>
                    <do_for_each name="$product" in="$ModuleData.$Products">
                      <set_value name="$StationData.$Products.{$product}" operation="add" exact="$ModuleData.$Products.{$product}" />
                      <do_if value="@$Enhanced_Resources.{$product} == null">
                        <set_value name="$Enhanced_Resources.{$product}" exact="table[]" />
                      </do_if>
                      <set_value name="$Enhanced_Resources.{$product}.$production" operation="add" exact="$ModuleData.$Products.{$product}" />
                    </do_for_each>
                    <do_for_each name="$secondary" in="$ModuleData.$Secondary">
                      <set_value name="$StationData.$Secondary.{$secondary}" operation="add" exact="$ModuleData.$Secondary.{$secondary}" />
                      <do_if value="@$Enhanced_Resources.{$secondary} == null">
                        <set_value name="$Enhanced_Resources.{$secondary}" exact="table[]" />
                      </do_if>
                      <set_value name="$Enhanced_Resources.{$secondary}.$secondaryDemand" operation="add" exact="$ModuleData.$Secondary.{$secondary}" />
                    </do_for_each>
                  </do_if>
                </do_for_each>
                <!-- build modules -->
                <do_for_each name="$buildModule" in="$station.buildmodules">
                  <do_if value="not @$Enhanced_BuildStations.{$station}">
                    <add_to_group groupname="$Enhanced_BuildStations" object="$station" />
                  </do_if>
                  <do_if value="not @$Enhanced_PrimeSectors.{$station.sector}">
                    <add_to_group groupname="$Enhanced_PrimeSectors" object="$sector" />
                    <set_value name="$Enhanced_Sectors.{$sector}.$Values.$strategic" operation="add" exact="$Enhanced_Params.$SectorWeights.$prime" />
                  </do_if>
                  <do_if value="not @global.$EnhancedLogic.$AllBuildmodules.indexof.{$buildModule} or $remove">
                    <do_if value="$remove">
                      <remove_from_group group="global.$EnhancedLogic.$AllBuildmodules" object="$buildModule" />
                    </do_if>
                    <do_else>
                      <add_to_group groupname="global.$EnhancedLogic.$AllBuildmodules" object="$buildModule" />
                    </do_else>
                    <set_value name="$macro" exact="$buildModule.macro" />
                    <!-- add module to sector -->
                    <do_if value="@$SectorData.$NumBuildModules == null">
                      <set_value name="$SectorData.$NumBuildModules" exact="table[]" />
                    </do_if>
                    <set_value name="$SectorData.$NumBuildModules.{$macro}" operation="add" exact="1" />
                    <!-- add build slots to faction  -->
                    <set_value name="$Slots.$s" operation="add" exact="@$macro.numdocks.{tag.dock_s)" />
                    <set_value name="$Slots.$m" operation="add" exact="@$macro.numdocks.{tag.dock_m)" />
                    <set_value name="$Slots.$l" operation="add" exact="@$macro.numdocks.{tag.dock_l)" />
                    <set_value name="$Slots.$xl" operation="add" exact="@$macro.numdocks.{tag.dock_xl)" />
                    <set_value name="$Slots.$xxl" operation="add" exact="@$macro.numdocks.{tag.dock_xxl)" />
                  </do_if>
                </do_for_each>
                <!-- get dynamic values (workforceBonus, resources/products in station cargo) -->
                <include_actions ref="Update_Station" />
                <include_actions ref="Process_Transportation_EfficiencyRatio" />
              </do_if>
            </do_else>
            <!-- enhanced todo: add colony check -->
          </actions>
        </library>
        <library name="Process_Transportation_EfficiencyRatio">
          <actions>
            <!-- get demand ratio for transportation
              run when demand changes

              transport and mining efficiency are also static because they only need to be calculated when a ship is built/destroyed
            
            transportationEfficiencyRatio

            - calculate transportation efficiency -
            - consider demand, volume -
            -->
            <get_ware_definition result="$products" tags="[tag.container, tag.economy]" />
            <do_for_each name="$resource" in="$products">
              <do_if value="@$Enhanced_Resources.{$resource} == null">
                <set_value name="$Enhanced_Resources.{$resource}" exact="table[$demand=0]" />
              </do_if>
              <set_value name="$sum" operation="add" exact="$Enhanced_Resources.{$resource}.$demand" />
            </do_for_each>
            <do_for_each name="$resource" in="$products">
              <!-- enhanced todo: add distance factor? -->
              <set_value name="$Enhanced_Resources.{$resource}.$efficiencyRatio" exact="$Enhanced_Resources.{$resource}.$demand / $sum" />
            </do_for_each>
          </actions>
        </library>
        <!-- end Process_Station -->


        <library name="Run_Scoring_and_State_Check">
          <actions>
            <!-- clear variables -->
            <set_value name="$Enhanced_Industry.$BuildShortage" exact="table[]" />

            <do_if value="$Enhanced_runInit">
              <!-- process everything on first run -->
              <include_actions ref="Init_Process_Objects" />
              <set_value name="$Enhanced_runInit" exact="false" />
            </do_if>
            <include_actions ref="Calculate_Raw_Scores" />
            <include_actions ref="Check_Emergencies" />
            <!-- <include_actions ref="Check_State_Change" /> -->
            <include_actions ref="Set_Build_Order_Priority" />
            <signal_cue_instantly cue="PeriodicProductionCheck" />
          </actions>
        </library>
        <library name="Calculate_Raw_Scores">
          <!--
          
          -->
          <actions>
            <include_actions ref="Update_Objects" />
            <include_actions ref="Calculate_Raw_Economy_Score" />
            <include_actions ref="Calculate_Raw_Military_Score" />
            <include_actions ref="Calculate_Raw_Industry_Score" />
          </actions>
        </library>
        <library name="Update_Objects">
          <actions>
            <!-- sectors -->
            <find_sector name="$Sectors" trueowner="$Faction" multiple="true" />
            <do_for_each name="$sector" in="$Sectors">
              <include_actions ref="Update_Sector" />
            </do_for_each>
            <!-- stations -->
            <find_station_by_true_owner name="$stations" faction="$Faction" space="player.galaxy" checkoperational="false" multiple="true">
              <match state="componentstate.wreck" negate="true" />
            </find_station_by_true_owner>
            <do_for_each name="$station" in="$stations">
              <include_actions ref="Update_Station" />
            </do_for_each>
          </actions>
        </library>
        <library name="Update_Sector">
          <!-- applicable variables
          $Enhanced_Sectors = table[
            {$sector} = table[
              * $Values = table[
                * $economic = int (dynamic)
                $resource = int (static)
                * $strategic = int (dynamic)
              ]
              $NumProductionModules = table[
                {$moduletype} = int (static)
              ]
              $NumBuildModules = table[
                {$moduletype} = int (static)
              ]
              * $desiredThreatscore = int (dynamic)
            ]
          ]

          def Calculate_Sector_Desired_Threatscore(self, sector):
            # Calculates strategic importance of a sector for military scoring
            resource_value = self.Get_Resource_Value(sector.resources)
            strategic_value = self.Get_Strategic_Value(sector)
            economic_value = sum(station.price * 2 if station.iswharf or station.isshipyard else station.price for station in sector.stations)
            
            # Pirate activity affects both economy and military scores
            pirate_activity = sector.pirate_activity  # Number of ships destroyed by pirates / total number of non-military ships assigned to sector
            self.pirate_activity = (self.pirate_activity + pirate_activity) / 2 if self.pirate_activity > 0 else pirate_activity
            
            total_value = resource_value + strategic_value + economic_value + pirate_activity
            return total_value / self.Enhanced_Values
          -->
          <actions>
            <debug_text text="'update sector value: '+$sector.knownname" chance="$DebugChance" />

            <!-- enhanced todo: pirate activity metric -->
            <!-- # Pirate activity affects both economy and military scores
                  pirate_activity = sector.pirate_activity # Number of ships destroyed by pirates / total number of non-military ships assigned to sector
                  self.pirate_activity = (self.pirate_activity + pirate_activity) / 2 if self.pirate_activity > 0 else pirate_activity -->
            <set_value name="$Enhanced_Sectors.{$sector}.$desiredThreatscore" exact="
              $Enhanced_Sectors.{$sector}.$Values.$economic / $sectorValuePerThreatscore + 
              $Enhanced_Sectors.{$sector}.$Values.$strategic + 
              $Enhanced_Sectors.{$sector}.$Values.$resource
            " />
          </actions>
        </library>
        <!-- end Update_Sector -->
        <library name="Update_Station">
          <!-- applicable variables
            $Enhanced_Stations = table[
              {$station} = table[
                $isPlanetaryTradestation = bool (static)
                $Demands = table[
                  {$resource} = int (per hour) (static)
                ]
                $Products = table[
                  {$product} = int (per hour) (static)
                ]
                $Secondary = table[
                  {$resource} = int (per hour) (static)
                ]
                * $On_hand = table[
                  {$resource} = int (resource stored in station) (dynamic)
                * $workforceBonus = float (dynamic)
              ] 
            ]
            $Enhanced_Resources = table[
              {$resource} = table[
                $available = largeint (faction-wide availability)
                $production = int (faction-wide productionmodule products)
                * $on_hand = int (faction-wide resources stored in stations)
                $demand = int (faction-wide productionmodule demand, not secondary)
                $secondaryDemand = int (faction-wide productionmodule secondary demand)
                $saturation = float ($on_hand / $demand)
                $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
                $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
              ]
            ]
          -->
          <actions>
            <!-- get on-hand stockpile -->
            <set_value name="$StationData" exact="$Enhanced_Stations.{$station}" />
            <do_for_each name="$resource" in="$station.cargo">
              <set_value name="$amount" exact="$station.cargo.{$resource}.count" />
              <set_value name="$Enhanced_Resources.{$resource}.$onhand" operation="add" exact="$amount" />
              <set_value name="$StationData.$On_hand.{$resource}" exact="$amount" />
            </do_for_each>
            <!-- get stockpile -->
            <set_value name="$StationData.$workforceBonus" exact="$station.workforce.bonus" />
          </actions>
        </library>
        <!-- end Update_Objects -->

        <library name="Calculate_Raw_Economy_Score">
          <!-- notes:
            calculate resource scores:
              includes saturation and transport/mining efficiency
              if on_hand > one hour of demand - production efficiency then 1 else between 0 and 1
            -->
          <actions>
            <include_actions ref="Calculate_Resource_Score" />
            <!-- returns $resourceScore-->

            <!-- enhanced todo: economy score
            how many ship builds started and cost (modifies demand)
            how many build slots are inactive vs waitlist = not enough resources (not enough production)
            how many station builds started and expected costs
            how many station builds in waitlist = not enough resources -->

            <set_value name="$Enhanced_Scores.$economy" exact="$resourceScore" />
          </actions>
        </library>
        <library name="Calculate_Resource_Score">
          <actions>
            <!-- notes: 
                calculate current saturation
                average of all saturation scores
            -->
            <!-- relevant variables
            $Enhanced_Resources = table[
              {$resource} = table[
                $available = largeint (faction-wide availability)
                * $production = int (faction-wide productionmodule products)
                * $on_hand = int (faction-wide resources stored in stations)
                * $demand = int (faction-wide productionmodule demand, not secondary)
                $secondaryDemand = int (faction-wide productionmodule secondary demand)
                * $saturation = float ($on_hand / $demand)
                $efficiencyRatio = float (transport/mining efficiency ratio, demand/totalDemand or typeAvailability/totalAvailability)
                * $efficiency = float (enhanced_ships.{$resource} * $efficiencyRatio)
              ]
            ]
            -->
            <!-- calculate current saturation -->
            <get_ware_definition result="$minables" tags="[tag.minable]" />
            <do_for_each name="$resource" valuename="$Table" in="$Enhanced_Resources">
              <do_if value="not $minables.indexof.{$resource}">
                <!-- products saturation -->
                <set_value name="$Table.$saturation" exact="[$Table.$on_hand / 
                    [($Table.$demand + $Table.$secondaryDemand * $Enhanced_Params.$secondaryDemandImportance) - ($Table.$efficiency * $Table.$production), 1].max
                    , 1].min" />
              </do_if>
              <do_else>
                <!-- minables saturation  -->
                <set_value name="$Table.$saturation" exact="[$Table.$on_hand / 
                    [$Table.$demand - ($Table.$efficiency * $extraction_rate), 1].max
                    , 1].min" />
              </do_else>
              <set_value name="$sum" operation="add" exact="$Table.$saturation" />
            </do_for_each>
            <!-- average of all saturation -->
            <set_value name="$resourceScore" exact="$sum / $Enhanced_Resources.count" />
          </actions>
        </library>
        <!-- end Calculate_Raw_Economy_Score -->
        <library name="Calculate_Raw_Military_Score">
          <actions>
            <!-- total military threatscore / total desired threatscore -->
            <do_for_each name="$sector" in="$Enhanced_Sectors">
              <set_value name="$totalThreatScore" operation="add" exact="$Enhanced_Sectors.{$sector}.$threatscore" />
              <set_value name="$desiredThreatScore" operation="add" exact="$Enhanced_Sectors.{$sector}.$desiredThreatscore" />
            </do_for_each>
            <set_value name="$Enhanced_Scores.$military" exact="$totalThreatScore / $desiredThreatScore" />
            <set_value name="$Enhanced_BuildPriority.$Ships.$fight" exact="$Enhanced_Scores.$military" />
          </actions>
        </library>
        <!-- end Calculate_Raw_Military_Score -->
        <library name="Calculate_Raw_Industry_Score">
          <!--
          -->
          <actions>
            <!-- enhanced todo: sent to build ship
              build ship on planet, needs time to construct ship from ware, and spawn point between planet and planetary station spawn point
              if station build in waitlest and resources available and no cv available, then request another cv
            -->
            <include_actions ref="Calculate_Ship_Building_Score" />
            <include_actions ref="Calculate_Station_Building_Score" />
            <set_value name="$Enhanced_Scores.$industry" exact="[$shipBuildingScore, $stationBuildScore].average" />
          </actions>
        </library>
        <library name="Calculate_Ship_Building_Score">
          <!--
                  -->
          <actions>
            <do_if value="$Enhanced_Industry.$BuildShortage.$s gt 0">
              <set_value name="$sShortage" exact="[$Enhanced_Industry.$BuildSlots.$s / $Enhanced_Industry.$BuildShortage.$s, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$sShortage" exact="1" />
            </do_else>
            <do_if value="$Enhanced_Industry.$BuildShortage.$m gt 0">
              <set_value name="$mShortage" exact="[$Enhanced_Industry.$BuildSlots.$m / $Enhanced_Industry.$BuildShortage.$m, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$mShortage" exact="1" />
            </do_else>
            <do_if value="$Enhanced_Industry.$BuildShortage.$l gt 0">
              <set_value name="$lShortage" exact="[$Enhanced_Industry.$BuildSlots.$l / $Enhanced_Industry.$BuildShortage.$l, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$lShortage" exact="1" />
            </do_else>
            <do_if value="$Enhanced_Industry.$BuildShortage.$xl gt 0">
              <set_value name="$xlShortage" exact="[$Enhanced_Industry.$BuildSlots.$xl / $Enhanced_Industry.$BuildShortage.$xl, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$xlShortage" exact="1" />
            </do_else>
            <do_if value="$Enhanced_Industry.$BuildShortage.$xxl gt 0">
              <set_value name="$xxlShortage" exact="[$Enhanced_Industry.$BuildSlots.$xxl / $Enhanced_Industry.$BuildShortage.$xxl, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$xxlShortage" exact="1" />
            </do_else>
            <set_value name="$Enhanced_BuildPriority.$Buildmodules" exact="table[
              $wharf = [sShortage, mShortage].min,
              $l = lShortage,
              $xl = xlShortage,
              $xxl = xxlShortage
            ]" />
            <set_value name="$shipBuildingScore" exact="[$sShortage, $mShortage, $lShortage, $xlShortage, $xxlShortage].average" />
          </actions>
        </library>
        <library name="Calculate_Station_Building_Score">
          <!--
                  -->
          <actions>
            <do_if value="$Enhanced_Industry.$BuildShortage.$station gt 0">
              <set_value name="$stationBuildScore" exact="[$Enhanced_Ships.$Construction / $Enhanced_Industry.$BuildShortage.$station, 1].min" />
            </do_if>
            <do_else>
              <set_value name="$stationBuildScore" exact="1" />
            </do_else>
            <set_value name="$Enhanced_BuildPriority.$Ships.$build" exact="$stationBuildScore" />
          </actions>
        </library>
        <!-- end Calculate_Raw_Industry_Score -->
        <!-- end Calculate_Raw_Scores -->

        <library name="Check_Emergencies">
          <!-- 
          <set_value name="$Enhanced_Scores" exact="table[
            $economy = null,
            $military = null,
            $industry = null,
            $economyModifier = null,
            $militaryModifier = null,
            $industryModifier = null
          ]" />
          -->
          <actions>
            <do_if value="$Enhanced_Scores.$economy le $Enhanced_Params.$EmergencyThreshholds.$economy">
              <set_value name="$Enhanced_Scores.$economyModifier" exact="$Enhanced_Scores.$economy * $Enhanced_Params.$EmergencyWeights.$economy" />
            </do_if>
            <do_else>
              <set_value name="$Enhanced_Scores.$economyModifier" exact="$Enhanced_Scores.$economy" />
            </do_else>
            <do_if value="$Enhanced_Scores.$industry le $Enhanced_Params.$EmergencyThreshholds.$industry">
              <set_value name="$Enhanced_Scores.$industryModifier" exact="$Enhanced_Scores.$industry * $Enhanced_Params.$EmergencyWeights.$industry" />
            </do_if>
            <do_else>
              <set_value name="$Enhanced_Scores.$industryModifier" exact="$Enhanced_Scores.$industry" />
            </do_else>
            <do_if value="$Enhanced_Scores.$military le $Enhanced_Params.$EmergencyThreshholds.$military">
              <set_value name="$Enhanced_Scores.$militaryModifier" exact="$Enhanced_Scores.$military * $Enhanced_Params.$EmergencyWeights.$military" />
            </do_if>
            <do_else>
              <set_value name="$Enhanced_Scores.$militaryModifier" exact="$Enhanced_Scores.$military" />
            </do_else>
          </actions>
        </library>

        <library name="Check_State_Change">
          <!-- notes:
              if self.state == State.EXPANSION:
                  if military_score< threshholds ['mil_defense' ]: self.state= State.DEFENSE
                  elif economy_score < threshholds ['eco_consolidation' ] or industry_score < threshholds ['ind_consolidation' ]: self.state= State.CONSOLIDATE

              elif self.state== State.CONSOLIDATE:
                  if military_score < threshholds['mil_defense']:
                      self.state = State.DEFENSE
                  elif economy_score > threshholds['eco_expansion'] and industry_score > threshholds['ind_expansion'] and military_score > threshholds['mil_expansion']:
                      self.state = State.EXPANSION

              elif self.state == State.DEFENSE:
                  if economy_score > threshholds['eco_expansion'] and industry_score > threshholds['ind_expansion'] and military_score > threshholds['mil_expansion']:
                      self.state = State.EXPANSION
                  elif military_score > threshholds['mil_consolidation']:
                      self.state = State.CONSOLIDATE

            state influences ship/station build priority, claiming/contesting sectors
            enhanced todo: war state not implemented - requires changes to vanilla invasion/response logic

            $Enhanced_State = table[
              $state = 'CONSOLIDATE',
              $atWar = false
            ]
            $Enhanced_Params.$StateWeights = table[
              $EXPANSION = table[    $economy = 0,    $military = 0,    $industry = 0.2  ],
              $CONSOLIDATE = table[  $economy = 0.2,  $military = 0,    $industry = 0    ],
              $DEFENSE = table[      $economy = 0,    $military = 0.2,  $industry = 0    ],
              $WAR = table[          $economy = 0,    $military = 0.2,  $industry = 0    ] (modifies other three states when at war)
            ]
          -->
          <actions>
            <!-- enhanced todo: convert from weights to modifiers -->
            <!-- Retrieve current scores and state -->
            <set_value name="$currentState" exact="$Enhanced_State.$current" />
            <set_value name="$economyScore" exact="$Enhanced_Scores.$economy" />
            <set_value name="$militaryScore" exact="$Enhanced_Scores.$military" />
            <set_value name="$industryScore" exact="$Enhanced_Scores.$industry" />

            <!-- State Transitions -->
            <do_if value="$currentState == 'EXPANSION'">
              <!-- Check if military is too weak, switch to DEFENSE -->
              <do_if value="$militaryScore lt $Enhanced_Params.$StateThreshholds.$mil_defense">
                <set_value name="$Enhanced_State.$last" exact="$currentState" />
                <set_value name="$Enhanced_State.$current" exact="'DEFENSE'" />
              </do_if>
              <!-- Check if economy or industry is struggling, switch to CONSOLIDATE -->
              <do_elseif value="$economyScore lt $Enhanced_Params.$StateThreshholds.$eco_consolidation or $industryScore lt $Enhanced_Params.$StateThreshholds.$ind_consolidation">
                <set_value name="$Enhanced_State.$last" exact="$currentState" />
                <set_value name="$Enhanced_State.$current" exact="'CONSOLIDATE'" />
              </do_elseif>
            </do_if>

            <do_elseif value="$currentState == 'CONSOLIDATE'">
              <!-- Check if military is too weak, switch to DEFENSE -->
              <do_if value="$militaryScore lt $Enhanced_Params.$StateThreshholds.$mil_defense">
                <set_value name="$Enhanced_State.$last" exact="$currentState" />
                <set_value name="$Enhanced_State.$current" exact="'DEFENSE'" />
              </do_if>
              <!-- Check if all scores are strong enough for EXPANSION -->
              <do_elseif value="$economyScore gt $Enhanced_Params.$StateThreshholds.$eco_expansion and $industryScore gt $Enhanced_Params.$StateThreshholds.$ind_expansion and $militaryScore gt $Enhanced_Params.$StateThreshholds.$mil_expansion">
                <set_value name="$Enhanced_State.$last" exact="$currentState" />
                <set_value name="$Enhanced_State.$current" exact="'EXPANSION'" />
              </do_elseif>
            </do_elseif>

            <do_elseif value="$currentState == 'DEFENSE'">
              <!-- Check if all scores are strong enough for EXPANSION -->
              <do_if value="$economyScore gt $Enhanced_Params.$StateThreshholds.$eco_expansion and $industryScore gt $Enhanced_Params.$StateThreshholds.$ind_expansion and $militaryScore gt $Enhanced_Params.$StateThreshholds.$mil_expansion">
                <set_value name="$Enhanced_State.$last" exact="$currentState" />
                <set_value name="$Enhanced_State.$current" exact="'EXPANSION'" />
              </do_if>
              <!-- Check if military is stable enough for CONSOLIDATE -->
              <do_elseif value="$militaryScore gt $Enhanced_Params.$StateThreshholds.$mil_consolidation">
                <set_value name="$Enhanced_State.$last" exact="$currentState" />
                <set_value name="$Enhanced_State.$current" exact="'CONSOLIDATE'" />
              </do_elseif>
            </do_elseif>

            <!-- Apply State Weights to Build Priorities -->
            <set_value name="$stateWeights" exact="$Enhanced_Params.$StateWeights.{$Enhanced_State.$state}" />
            <set_value name="$Enhanced_BuildPriority.$Productionmodules.$economy" exact="$stateWeights.$economy" />
            <set_value name="$Enhanced_BuildPriority.$Ships.$fight" operation="add" exact="$stateWeights.$military" />
            <set_value name="$Enhanced_BuildPriority.$Buildmodules.$industry" exact="$stateWeights.$industry" />
            <do_if value="Start_FactionLogic_Enhanced_Waitlist.state == cuestate.waiting">
              <signal_cue_instantly cue="Start_FactionLogic_Enhanced_Waitlist" />
            </do_if>
          </actions>
        </library>

        <library name="PeriodicProductionCheck">
          <actions>
            <set_value name="$BaseExpansionThreshold" exact="3600" /> <!-- 1 hour of unmet demand -->
            <set_value name="$BaseNewFactoryThreshold" exact="14400" /> <!-- 4 hours of unmet demand -->

            <!-- Process resource shortages faction-wide -->
            <do_for_each name="$Resource" in="$Enhanced_Resources">
              <do_if value="not $Resource.hastag.minable">
                <!-- Calculate effective demand -->
                <set_value name="$ResourceData" exact="$Enhanced_Resources.{$Resource}" />
                <set_value name="$Demand" exact="$ResourceData.$demand + $ResourceData.$secondaryDemand" />
                <set_value name="$Production" exact="$ResourceData.$production * $ResourceData.$efficiency" />
                <set_value name="$OnHand" exact="$ResourceData.$on_hand" />
                <set_value name="$Saturation" exact="$ResourceData.$saturation" />
                <set_value name="$UnmetDemand" exact="[$Demand - $Production, 0].max * (1 - $Saturation)" />

                <!-- Find sectors with production capability -->
                <set_value name="$ProductionSectors" exact="[]" />
                <do_for_each name="$Sector" in="$Enhanced_Sectors">
                  <find_station_by_true_owner name="$Stations" faction="$Faction" space="$Sector" multiple="true" checkoperational="false">
                    <match_products wares="$Resource" />
                  </find_station_by_true_owner>
                  <do_if value="$Stations.count gt 0">
                    <append_to_list name="$ProductionSectors" exact="$Sector" />
                  </do_if>
                  <remove_value name="$Stations" />
                </do_for_each>

                <!-- Determine total factory count -->
                <set_value name="$TotalFactoryCount" exact="0" />
                <do_for_each name="$Sector" in="$ProductionSectors">
                  <find_station_by_true_owner name="$Stations" faction="$Faction" space="$Sector" multiple="true" checkoperational="false">
                    <match_products wares="$Resource" />
                  </find_station_by_true_owner>
                  <set_value name="$TotalFactoryCount" operation="add" exact="$Stations.count" />
                  <remove_value name="$Stations" />
                </do_for_each>

                <!-- Adjust thresholds based on faction state -->
                <set_value name="$StateModifier" exact="$Enhanced_Params.$StateWeights.{$Enhanced_State.$state}.$economy" />
                <set_value name="$PriorityModifier" exact="$Enhanced_BuildPriority.$Productionmodules.$economy" />
                <set_value name="$ExpansionThreshold" exact="$BaseExpansionThreshold * (1 + $StateModifier + $PriorityModifier)" />
                <set_value name="$NewFactoryThreshold" exact="$BaseNewFactoryThreshold * (1 + $StateModifier + $PriorityModifier)" />

                <!-- Decide production action and add to waitlist -->
                <do_if value="$UnmetDemand gt $ExpansionThreshold and $TotalFactoryCount lt $MaxFactoriesPerWare">
                  <do_if value="$TotalFactoryCount ge $MinFactoriesPerWare and $ProductionSectors.count gt 0">
                    <!-- Expand production in an existing sector -->
                    <set_value name="$TargetSector" exact="$ProductionSectors.random" />
                    <set_value name="$WaitlistEntry" exact="table[
                      $type = 'expansion',
                      $resource = $Resource,
                      $sector = $TargetSector,
                      $priority = $UnmetDemand * (1 + $StateModifier + $PriorityModifier)
                    ]" />
                    <append_to_list name="$Enhanced_Waitlists.$Stations.$Economy" exact="$WaitlistEntry" />
                    <debug_text text="'Added production expansion for ' + $Resource + ' in sector ' + $TargetSector.knownname + ' to waitlist'" chance="$DebugChance" />
                  </do_if>
                  <do_elseif value="$UnmetDemand gt $NewFactoryThreshold">
                    <!-- Select a sector for a new factory -->
                    <set_value name="$TargetSector" exact="null" />
                    <do_if value="$Enhanced_PrimeSectors.count gt 0">
                      <set_value name="$TargetSector" exact="$Enhanced_PrimeSectors.random" />
                    </do_if>
                    <do_elseif value="$Enhanced_Sectors.keys.count gt 0">
                      <set_value name="$TargetSector" exact="$Enhanced_Sectors.keys.random" />
                    </do_elseif>

                    <do_if value="$TargetSector">
                      <set_value name="$WaitlistEntry" exact="table[
                        $type = 'factory',
                        $resource = $Resource,
                        $sector = $TargetSector,
                        $priority = $UnmetDemand * (1 + $StateModifier + $PriorityModifier)
                      ]" />
                      <append_to_list name="$Enhanced_Waitlists.$Stations.$Economy" exact="$WaitlistEntry" />
                      <debug_text text="'Added new factory for ' + $Resource + ' in sector ' + $TargetSector.knownname + ' to waitlist'" chance="$DebugChance" />
                    </do_if>
                  </do_elseif>
                </do_if>

                <remove_value name="$ProductionSectors" />
              </do_if>
            </do_for_each>

            <!-- Signal waitlist processing if not already running -->
            <do_if value="Start_FactionLogic_Enhanced_Waitlist.state == cuestate.waiting">
              <signal_cue_instantly cue="Start_FactionLogic_Enhanced_Waitlist" />
            </do_if>

            <!-- Clean up -->
            <remove_value name="$ResourceData" />
            <remove_value name="$TargetSector" />
            <reset_cue cue="PeriodicProductionCheck" />
          </actions>
        </library>

        <!-- end Run_Scoring_and_State_Check -->
      </cues>
    </cue>
  </cues>
</mdscript>