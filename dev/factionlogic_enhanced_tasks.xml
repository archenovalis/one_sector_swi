<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionLogic_Enhanced_Tasks" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../xsd/md.xsd">
  <cues>
    <cue name="LuaEvents_Instanced" instantiate="true">
      <conditions>
        <check_any>
          <event_ui_triggered screen="'OneSector'" control="'setProductionDemandOutput'" /> <!-- param3 = table[products[ware, value], resources[ware, value]] -->
        </check_any>
      </conditions>
      <actions>
        <!-- receive table of production modules' production capabilities and demands -->
        <do_if value="event.param2 == 'setProductionDemandOutput'">
          <set_value name="global.$EnhancedLogic.$ProductionDemandOutput" exact="event.param3" />
        </do_if>
      </actions>
    </cue>

    <library name="DynamicDoAny" purpose="run_actions">
      <params>
        <param name="TableOfWeights" />
      </params>
      <actions>
        <set_value name="$cumulativeTotal" exact="0" />
        <do_for_each name="$key" valuename="$weight" in="$TableOfWeights">
          <set_value name="$cumulativeTotal" operation="add" exact="$weight" />
          <set_value name="$prefixSum.{$key}" exact="$cumulativeTotal" />
        </do_for_each>
        <set_value name="$rand" min="0" max="$cumulativeTotal" />
        <do_for_each name="$key" valuename="$sum" in="$prefixSum">
          <do_if value="$rand le $sum">
            <set_value name="$chosen" exact="$key" />
            <break />
          </do_if>
        </do_for_each>
        <return value="$chosen" />
      </actions>
    </library>

    <cue name="Handle_Ships" instantiate="true">
      <conditions>
        <check_any>
          <check_all>
            <event_build_finished group="global.$EnhancedLogic.$AllBuildmodules" />
            <check_value value="event.param3.buildobject.trueowner != faction.player" />
            <check_value value="@[purpose.fight, purpose.auxiliary, purpose.trade, purpose.mine, purpose.salvage, purpose.build].indexof.{event.param3.buildobject.primarypurpose}" />
          </check_all>
          <event_object_destroyed group="global.$EnhancedLogic.$AllShips" />
          <event_object_changed_true_owner group="global.$EnhancedLogic.$AllShips" />
        </check_any>
      </conditions>
      <delay exact="1ms" />
      <actions>
        <do_if value="event.name == 'event_build_finished'">
          <set_value name="$ship" exact="event.param3.buildobject" />
          <add_to_group groupname="global.$EnhancedLogic.$AllShips" object="$ship" />
          <run_actions ref="md.FactionLogic_Enhanced.Process_Ship">
            <param name="Faction" value="event.object.trueowner" />
            <param name="ship" value="$ship" />
          </run_actions>
        </do_if>

        <do_elseif value="event.name == 'event_object_destroyed'">
          <set_value name="$ship" exact="event.object" />
          <remove_from_group group="global.$EnhancedLogic.$AllShips" object="$ship" />
          <run_actions ref="md.FactionLogic_Enhanced.Process_Ship">
            <param name="Faction" value="event.object.trueowner" />
            <param name="ship" value="event.object" />
            <param name="remove" value="true" />
          </run_actions>
        </do_elseif>

        <do_elseif value="event.name == 'event_object_changed_true_owner'">
          <do_if value="@global.$FactionManagers.{event.param}">
            <run_actions ref="md.FactionLogic_Enhanced.Process_Ship">
              <param name="Faction" value="event.param" />
              <param name="ship" value="event.object" />
            </run_actions>
          </do_if>
          <do_if value="@global.$FactionManagers.{event.param2}">
            <run_actions ref="md.FactionLogic_Enhanced.Process_Ship">
              <param name="Faction" value="event.param2" />
              <param name="ship" value="event.object" />
              <param name="remove" value="true" />
            </run_actions>
          </do_if>
        </do_elseif>

        <cancel_cue cue="this" />
      </actions>
    </cue>

    <cue name="Handle_Sectors" instantiate="true">
      <conditions>
        <event_contained_sector_changed_owner space="player.galaxy" />
      </conditions>
      <delay exact="1ms" />
      <actions>
        <!-- enhanced todo: should this be moved to recon? -->
        <!-- initial sector for faction -->
        <do_if value="event.param3 == faction.ownerless">
          <set_value name="$sector" exact="event.param" />
          <do_if value="@global.$FactionManagers.{$event.param3}">
            <run_actions ref="md.FactionLogic_Enhanced.Process_Sector">
              <param name="Faction" value="event.param2" />
              <param name="sector" value="$sector" />
            </run_actions>
          </do_if>
        </do_if>
        <include_actions ref="Handle_Borders" />
        <cancel_cue cue="this" />
      </actions>
    </cue>

    <library name="Handle_Borders">
      <!-- notes:
        prime sectors are handled by process stations

        remember to handle contested sectors
      -->
      <actions>
        <!-- from vanilla md.FactionLogic.UpdateData -->
        <!--Find gates in owned sectors which lead to unowned sectors and list those sectors as adjacent. Flag owned sectors bordering enemies as border.-->
        <do_for_each name="$OwnSector" in="$Sectors">
          <find_gate name="$JumpGates" space="$OwnSector" active="true" multiple="true" />
          <find_highway_entry_gate name="$JumpGates" space="$OwnSector" superhighwaygate="true" append="true" multiple="true" />
          <set_value name="this.$BorderingEnemy" exact="false" />
          <do_for_each name="$JumpGate" in="$JumpGates">
            <debug_text text="'gate ' + $OwnSector.knownname + ' dest ' + $JumpGate.destination.sector + ' ' + $JumpGate.destination.sector.knownname" chance="$DebugChance" />
            <set_value name="this.$GateDestination" exact="@$JumpGate.destination.sector" />
            <do_if value="this.$GateDestination and this.$ExcludedSectors.indexof.{this.$GateDestination} == 0">
              <debug_text text="$Faction + ' is checking ' + this.$GateDestination.knownname + ' ' + this.$GateDestination + ' from ' + $OwnSector.knownname" chance="$DebugChance" />
              <do_if value="$AdjacentSectors.indexof.{this.$GateDestination} == 0 and this.$GateDestination.owner != $Faction">
                <append_to_list name="$AdjacentSectors" exact="this.$GateDestination" />
              </do_if>

              <do_if value="not this.$BorderingEnemy">
                <!--Check if the sector of our jumpgate is fully in our control but the gate destination leads to a sector owned or contested by an enemy-->
                <do_if value="this.$GateDestination.iscontested">
                  <do_for_each name="$ContestingFaction" in="this.$GateDestination.contestingfactions">
                    <do_if value="$Faction.hasrelation.enemy.{$ContestingFaction}">
                      <set_value name="this.$BorderingEnemy" exact="true" />
                      <break />
                    </do_if>
                  </do_for_each>
                </do_if>
                <do_elseif value="$Faction.hasrelation.enemy.{this.$GateDestination.owner}">
                  <set_value name="this.$BorderingEnemy" exact="true" />
                </do_elseif>
              </do_if>
            </do_if>
          </do_for_each>
          <do_if value="this.$BorderingEnemy">
            <do_if value="not $OwnSector.haslocationtag.border">
              <debug_text text="'Faction ' + $Faction + ' will flag sector ' + $OwnSector + ' ' + $OwnSector.knownname + ' as a border sector'" chance="$DebugChance" />
              <add_space_location_tag space="$OwnSector" tag="tag.border" />
            </do_if>
          </do_if>
          <do_else>
            <!--Attempt to clear the border tag-->
            <set_value name="this.$Sector" exact="$OwnSector" />
            <include_actions ref="SectorNoLongerBorder" />
          </do_else>
        </do_for_each>

        <!-- get adjacent sectors -->
        <!-- if ownerless found tag ownerless as neutral zones and tag sector as border -->
        <!-- if other faction found tag then ensure both are tagged as border -->
        <!-- if tagged border and no ownerless or enemy faction adjacent then change tag to core -->

        <!-- update strategic value; if changing from border to core, or core to border, subtract and add -->
        <set_value name="$value" exact="if $sector.haslocationtag.border then $Enhanced_Params.$SectorWeights.$border else $Enhanced_Params.$SectorWeights.$core" />
        <set_value name="$Enhanced_Sectors.{$sector}.$Values.$strategic" operation="add" exact="$value" />

        <add_to_group groupname="global.$EnhancedLogic.$NeutralZones" object="$sector" />
        <remove_from_group group="global.$EnhancedLogic.$NeutralZones" object="$sector" />

        <add_space_location_tag space="$sector" tag="tag.neutralzone" />
        <remove_space_location_tag space="$sector" tag="tag.neutralzone" />
      </actions>
    </library>

    <cue name="Handle_Stations" instantiate="true">
      <conditions>
        <check_any>
          <check_all>
            <event_build_finished group="global.$EnhancedLogic.$AllBuildstorages" />
            <check_any>
              <check_value value="event.param3.buildobject.isdefencestation" />
              <check_value value="event.param3.buildobject.canbuildships" />
              <check_value value="@event.param3.buildobject.productions.count gt 0" />
            </check_any>
          </check_all>
          <check_all>
            <event_build_finished_components group="global.$EnhancedLogic.$AllBuildstorages" />
            <check_any>
              <check_value value="event.param3.buildobject.isdefencestation" />
              <check_value value="event.param3.buildobject.canbuildships" />
              <check_value value="@event.param3.buildobject.productions.count gt 0" />
            </check_any>
          </check_all>
          <check_all>
            <event_object_changed_true_owner group="global.$EnhancedLogic.$AllStations" />
          </check_all>
          <check_all>
            <event_object_destroyed group="global.$EnhancedLogic.$AllStations" />
          </check_all>
        </check_any>
      </conditions>
      <delay exact="1ms" />
      <actions>
        <do_if value="@['event_build_finished', 'event_build_finished_components'].indexof.{event.name}">
          <set_value name="$station" exact="event.param3.buildobject" />
          <do_if value="not @global.$EnhancedLogic.$AllStations.{$station}">
            <add_to_group groupname="global.$EnhancedLogic.$AllStations" object="$station" />
          </do_if>
          <run_actions ref="md.FactionLogic_Enhanced.Process_Station">
            <param name="Faction" value="$station.owner" />
            <param name="station" value="$station" />
          </run_actions>
        </do_if>

        <do_elseif value="event.name == 'event_object_changed_true_owner'">
          <set_value name="$station" exact="event.object" />
          <do_if value="@global.$FactionManagers.{event.param}">
            <run_actions ref="md.FactionLogic_Enhanced.Process_Station">
              <param name="Faction" value="event.param" />
              <param name="station" value="$station" />
            </run_actions>
          </do_if>
          <do_if value="@global.$FactionManagers.{event.param2}">
            <run_actions ref="md.FactionLogic_Enhanced.Process_Station">
              <param name="Faction" value="event.param2" />
              <param name="station" value="$station" />
              <param name="remove" value="true" />
            </run_actions>
          </do_if>
        </do_elseif>

        <do_elseif value="event.name == 'event_object_destroyed'">
          <set_value name="$station" exact="event.object" />
          <remove_from_group group="global.$EnhancedLogic.$AllStations" object="$station" />
          <run_actions ref="md.FactionLogic_Enhanced.Process_Station">
            <param name="Faction" value="$station.owner" />
            <param name="station" value="$station" />
            <param name="remove" value="true" />
          </run_actions>
        </do_elseif>
        <cancel_cue cue="this" />
      </actions>
    </cue>
  </cues>
</mdscript>